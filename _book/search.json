[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Data Analytics - Python",
    "section": "",
    "text": "Giới thiệu\nThis is a Quarto book.\nTo learn more about Quarto books visit https://quarto.org/docs/books.\n\n1 + 1\n\n2"
  },
  {
    "objectID": "p01-01-intro-jupyter-notebook.html#anaconda",
    "href": "p01-01-intro-jupyter-notebook.html#anaconda",
    "title": "1  Giới thiệu về Python và Jupyter Notebook",
    "section": "1.1 Anaconda",
    "text": "1.1 Anaconda\nCó nhiều cách để cài đặt và sử dụng Python, trong đó đơn giản nhất chúng ta có thể đi tới trực tiếp trang https://www.python.org/downloads/ để download cho Windows (hoặc Mac), tuy nhiên cách tiếp cận tốt hơn là sử dụng Platform Anaconda, đây là 1 Platform khá nổi tiếng trong Data Science, khi cài Anaconda ta sẽ có: - Python core - Các libraries phổ biến nhất (VD: pandas, numpy, matplotlib…) mà không cần phải cài mới mỗi khi cần sử dụng - Các IDE phổ biến nhất để sử dụng Python (Jupyter Notebook, Spyder) và R (Rstudio)\nĐể cài đặt Anacoda, đi đến trang https://www.anaconda.com/distribution/, chọn phiên bản Windows, download và install"
  },
  {
    "objectID": "p01-01-intro-jupyter-notebook.html#library-trong-python",
    "href": "p01-01-intro-jupyter-notebook.html#library-trong-python",
    "title": "1  Giới thiệu về Python và Jupyter Notebook",
    "section": "1.2 Library trong Python",
    "text": "1.2 Library trong Python\nTương tự như R, các library trong Python rất đa dạng và hỗ trợ giải quyết nhiều vấn đề khác nhau.\nCác thư viện thường dùng trong Python khi phân tích dữ liệu:\n\nNumpy: Tính toán đại số\nScipy: Tính toán các chỉ số khoa học\nMatplotlib, seaborn: Vẽ biểu đồ\nPandas: Tương ứng với data.table, dplyr, reshape2\nScikit Learn: Machine learning\n\n\n1.2.1 Cài đặt library trong Python\nPhần lớn các library đều đã được cài đặt cùng với Anaconda, các library khác khi cần chúng ta có thể cài bằng pip.\nVD, sử dụng Jupyter Notebook console\n!pip install seaborn\nHoặc sử dụng terminal\npip install seaborn #cài bằng pip\nconda install seaborn # cài bằng anaconda\nPhân biệt Modules/packages/Libraries: Khi làm việc với Python, ta sẽ thấy có 3 nhóm thuật ngữ sau - Function: Một hàm được người dùng tạo ra - Module: đơn giản là 1 file .py chứa 1 hoặc nhiều function/class nhằm mục đích tái sử dụng sau này, một module có thể chứa nhiều hàm - Package: đường dẫn đến thư mục chứa: - Nhiều Python module. - 1 file đặc biệt là __init.py__\nVD: Python package trong windows thường được chứa tại C:\\Users\\anhnt67\\AppData\\Local\\Continuum\\anaconda3\\Lib\\site-packages - Library: ở Python, library và package được dùng thay thế lẫn nhau\nImport Modules/packages\n\n# Import cả package, khi cần sử dụng function, gọi tên package trước\nimport numpy as np\nnp.sqrt(9)\n\n3.0\n\n\n\n# Chỉ import function trong packages\nfrom numpy import sqrt\nsqrt(9)\n\n3.0\n\n\n\n\n1.2.2 Cài đặt packages khi bị chặn proxy\nCài đặt với conda\n\nDownload package từ trang web: https://anaconda.org\nCài đặt với câu lệnh sau\n\nconda install --offline jupyter_contrib_core-0.3.3-py36_1.tar.bz2\nCài đặt với pip\n\nClone folder từ github\nMở terminal/cmd trong thư mục chưa project\nThực hiện câu lệnh sau:\n\npip install -e nbextensions\n\n\n1.2.3 Kiểm tra thư viện Python\n\nimport site\nsite.getsitepackages()\n\n['C:\\\\Users\\\\Hoang Duc Anh\\\\anaconda3',\n 'C:\\\\Users\\\\Hoang Duc Anh\\\\anaconda3\\\\lib\\\\site-packages']\n\n\n\nTa có thể copy thư viện Python như làm việc với R\n\n\n\n1.2.4 Một số câu lệnh cơ bản\n\n# Với jupyter notebook\ncwd = %pwd\nprint(cwd)\n\nD:\\OneDrive\\01-ds-book\\02-python-book\n\n\n\n# hoặc\nimport os\ncwd = os.getcwd()\nprint(cwd)\n\nD:\\OneDrive\\01-ds-book\\02-python-book\n\n\n\n# List các file trong thư mục hiện hành trong jupyter notebook %ls\nos.listdir()\n\n\n# chạy file (trong thư mục hiện hành)\n%run test.ipynb"
  },
  {
    "objectID": "p01-01-intro-jupyter-notebook.html#jupyter-notebook",
    "href": "p01-01-intro-jupyter-notebook.html#jupyter-notebook",
    "title": "1  Giới thiệu về Python và Jupyter Notebook",
    "section": "1.3 Jupyter Notebook",
    "text": "1.3 Jupyter Notebook\nJupyter Notebook là IDE phổ biến nhất cho Python, Jupyter Notebook sử dụng browser-based interface, cho phép chúng ta hiển thị code, hình ảnh, bảng biểu… và viết note bằng Markdown - tương tự như RMarkdown\nKhi Anaconda được cài, chúng ta có thể truy cập trực tiếp vào Jupyter Notebook từ Anaconda, hoặc có thể vào cmd, gõ jupyter notebook và Enter\n\nQuay về edit mode: Esc\nHiển thị các phím tắt: Ctrl + Shift + P\nInsert cell phía trên/ dưới: Esc + A, Esc + B\nChạy code: Ctrl + Enter\nChạy code & chuyển xuống cell dưới: Shift + Enter\nChuyển sang markdown, heading, raw: Esc + 1, Esc + 2, Esc + M, Esc + R\nChuyển về code: Esc + Y\nCut code: Esc + X\nComment/Uncomment: Ctrl + /\nChạy code & Insert below: Alt + Enter\nShift + Enter: run cell, move xuống dưới 1 dòng\nAlt + Enter: run cell, insert 1 dòng phía dưới\nUp/ Down: di chuyển lên xuống\nEnter: edit 1 cell\nEsc D+D: xóa 1 cell (nhớ tắt tiếng Việt)\nEsc + Z: undo\nEsc + S: save\nCtrl + Shift + -: Tách 1 cell thành 2 cell từ vị trí đặt con trỏ\n\n\n1.3.1 Cách hiển thị biểu đồ trong jupyer\nSử dụng option %matplotlib inline với jupyter\n\n# %matplotlib inline\nimport matplotlib.pyplot as plt\nplt.plot([1,2,3,4])\nplt.ylabel('some numbers')\nplt.show()\n\n\n\n\n\n\n1.3.2 Magic commands\nTrong Python có nhóm các câu lệnh được define sẵn được gọi là magic command. Các câu lệnh này cho phép thực hiện nhanh các nhóm lệnh khác.\n\n%lsmagic\n\nCác magic command thường dùng\n\n# Project working directory\n%pwd\n\n\n# Current directory in in Python\n%cd\n\n\n%ls\n\n\n\n1.3.3 Viết công thức toán\nTa có thể viết công thức toán như rmarkdown thông thường.\n\\[\\theta = \\sum_{i=1}^{n}X_{i}\\]\n\n\n1.3.4 Cài đặt extension cho phép quản lý jupyter tốt hơn\nconda install -c conda-forge jupyter_contrib_nbextensions jupyter_nbextensions_configurator\n\nVào Nbextension\nChọn options table of contents\nChọn các parameters\n\nCài đặt khi bị chặn proxy:\n\nLàm theo hướng dẫn tại https://github.com/ipython-contrib/jupyter_contrib_nbextensions\n\n\n\n1.3.5 Thay đổi working directory\n\n# Đổi working directory trong Jupyter\n%cd \"E:\\OneDrive\\2. Python\"\n\n\nKhi cài đặt Anaconda, lưu ý chọn option cho phép cài đặt PATH vào environment như hướng dẫn tại link\nNếu quên không cài, cần thực hiện câu lệnh sau trên CMD\n\nSETX PATH \"%PATH%;C:\\Users\\Admin\\Anaconda3\\Scripts; C:\\Users\\Admin\\Anaconda3\"\n\nSau đó, đặt file .bat tại thư mục chứa các notebook đang lưu, thực hiện như sau:\n\nrem  dir jupyter notebook\n\n\n1.3.6 Các lưu ý khác\n\n1.3.6.1 Xuống dòng trong code: Sử dụng dấu \\ và không có dấu cách sau đấy\n\n7 + \\\n    8\n\n15\n\n\n\n\n1.3.6.2 Comment với dấu\n\n8 * 9 #comment here\n\n72\n\n\n\n\n1.3.6.3 Docs string: Cho phép hiển thị các thông tin trong docs\n\n\"\"\"This is a\nmultiline docstring.\"\"\"\nprint(\"Hello, World!\")\n\nHello, World!\n\n\n\n\n1.3.6.4 Help trong python\n\nimport numpy as np\nnp.square??\n\n\nSử dụng tab để tự động điền các hàm hoặc khi import thư viện\n\nVí dụ: np.TAB\nfrom sklearn import da&lt;TAB&gt;\n\n\n1.3.6.5 Chạy external code trên notebook\n\n%run 09.test_script\\\\01_square.py\n\n\n\n1.3.6.6 Hiển thị code đã chạy\nJupyter notebook cho phép hiển thị các đoạn cell đã chạy trong cùng notebook\n\nprint(In[8])\n\n\n\n1.3.6.7 Làm việc với shell\nPython cho phép làm việc với shell trong Python\nls\nĐể gán kết quả từ shell, sử dụng toán tử !\nmy_content = !ls\nlen(my_content)\n\n\n1.3.6.8 Kiểm tra thời gian chạy code\n\n%time sum(range(100))"
  },
  {
    "objectID": "p01-01-intro-jupyter-notebook.html#jupyter-lab",
    "href": "p01-01-intro-jupyter-notebook.html#jupyter-lab",
    "title": "1  Giới thiệu về Python và Jupyter Notebook",
    "section": "1.4 Jupyter lab",
    "text": "1.4 Jupyter lab\nJupyter lab là phiên bản tiếp theo của jupyter notebook. Jupyter lab cho phép làm việc thuận tiện hơn với các extension và IDE thân thiện với người dùng.\nCài đặt jupyter lab:\n\nCài đặt nodejs: conda install -c conda-forge jodejs. Hoặc có thể download nodejs trực tiếp và cài đặt như bình thường\nCài đặt jupyterlab conda install -c conda-forge jupyterlab\nCài đặt jupyterlab extension\n  - jupytelab toc: `jupyter labextension install @jupyterlab/toc`\n  - Variable inspector: `jupyter labextension install @lckr/jupyterlab_variableinspector`\nNgoài ra, có thể cài thêm các extension khác như: code-formatter\n\nLưu ý: Trong trường hợp cài đặt extension bị chặn proxy cần phải mở proxy như sau:\nnpm config set https-proxy http://anhhd3:VPBank2016*@10.128.10.88:8080\nnpm config set registry http://registry.npmjs.org/\nnpm set strict-ssl=false"
  },
  {
    "objectID": "p01-01-intro-jupyter-notebook.html#sphinx",
    "href": "p01-01-intro-jupyter-notebook.html#sphinx",
    "title": "1  Giới thiệu về Python và Jupyter Notebook",
    "section": "1.5 Sphinx",
    "text": "1.5 Sphinx\nMặc dù jupyter notebook là công cụ hữu hiệu để phân tích dữ liệu với Python, jupyter lại chưa phải là công cụ hữu hiệu để viết lại các document thành hệ thống. Để viết hiệu quả, ta cần dùng sphinx\n\n# Cài đặt sphinx\npip install Sphinx\n\n# Cài đặt template\npip install sphinx_rtd_theme\n\n# Cài đặt notebook for sphinx\nconda install -c conda-forge nbsphinx\n\nSau khi cài đặt xong, ta có thể tạo project sphinx như sau\n\nsphinx-quickstart\n\nCác file notebook cần được liệt kê trong file index.rst\nSau khi set-up xong, toàn ta có thể run toàn bộ project như sau\n\nsphinx-build source_foder output_folder\nsphinx-build _source _build/html"
  },
  {
    "objectID": "p01-01-intro-jupyter-notebook.html#tài-liệu-tham-khảo",
    "href": "p01-01-intro-jupyter-notebook.html#tài-liệu-tham-khảo",
    "title": "1  Giới thiệu về Python và Jupyter Notebook",
    "section": "1.6 Tài liệu tham khảo",
    "text": "1.6 Tài liệu tham khảo\n\nhttps://www.dataquest.io/blog/jupyter-notebook-tips-tricks-shortcuts/\nhttps://jupyterlab.readthedocs.io/en/stable/getting_started/installation.html\nhttps://nbsphinx.readthedocs.io/en/0.4.2/installation.html\nhttps://sphinx-rtd-theme.readthedocs.io/en/stable/installing.html"
  },
  {
    "objectID": "p01-02-gioi-thieu-co-ban-python.html#variables---biến",
    "href": "p01-02-gioi-thieu-co-ban-python.html#variables---biến",
    "title": "2  Các cấu trúc cơ bản trong Python",
    "section": "2.1 Variables - biến",
    "text": "2.1 Variables - biến\nĐể gán biến trong Python, chúng ta sử dụng =, mỗi biến được gán sẽ chiếm 1 lượng bộ nhớ nhất định. Biến trong Python sẽ tương tự như object trong R\n\nx = 20\nx\n\n20\n\n\nĐặt tên biến phải follow 1 số rule cơ bản sau: - Sử dụng chữ, số, _ và ko được sử dụng ', -, khoảng trắng - Bắt đầu bằng chữ"
  },
  {
    "objectID": "p01-02-gioi-thieu-co-ban-python.html#cấu-trúc-dữ-liệu",
    "href": "p01-02-gioi-thieu-co-ban-python.html#cấu-trúc-dữ-liệu",
    "title": "2  Các cấu trúc cơ bản trong Python",
    "section": "2.2 Cấu trúc dữ liệu",
    "text": "2.2 Cấu trúc dữ liệu\n\nCác kiểu dữ liệu thông dụng nhất trong Python\n\nBooleans\nNumbers\nStrings\nPrinting\nLists\nDictionaries\n\nTuples\nSets\n\n\n\n2.2.1 Boolean\nbao gồm 2 giá trị True và False\n\nx = True\nx\n\nTrue\n\n\n\nx = 100 &lt; 2\nx\n\nFalse\n\n\nHàm type là hàm trả về kiểu dữ liệu của đối tượng\n\ntype(x)\n\nbool\n\n\nKhi tính toán số học True được tính là 1, False là 0\n\nTrue + False\n\n1\n\n\n\ny = [False, False, True, True] # List boolean value\nsum(y)\n\n2\n\n\n\n\n2.2.2 Numbers\ngiống như các ngôn ngữ khác, 2 kiểu dữ liệu số phổ biến là integer và float\n\na, b = 1, 2\nc, d = 2.5, 10.0\ntype(a)\n\nint\n\n\n\ntype(d)\n\nfloat\n\n\nInteger & float là kiểu dữ liệu bất biến (immutable). Khi thực hiện các phép toán trên dạng biến này, một ô nhớ khác được tạo ra và chứa kết quả, giá trị biến ban đầu được bảo toàn.VD:\n\nx = 2\nx * 2\n\n4\n\n\n\nx\n\n2\n\n\n\n# Gtri chỉ thay đổi khi gán vào 1 biến mới\nx = x * 2\nx\n\n4\n\n\n\n\n2.2.3 String\ntrong Python, string cũng là kiểu dữ liệu immutable\n\n\n# Có thể nhập bằng single quote hoặc double quote\na = 'single quotes'\nb = \"single quotes\"\na == b\n\nTrue\n\n\n\n#hoặc cả 2\nc = \"i'm a man\"\nc\n\n\"i'm a man\"\n\n\n\nword = \"hello\"\nword[0]\n\n'h'\n\n\nChuỗi bao gồm một tập hợp các ký tự sắp xếp tuần tự, mỗi ký tự đều có một chỉ mục(index) riêng.\nChỉ mục được đánh 2 chiều từ trái qua phải và từ phải qua trái. Bên dưới là cách truy cập vào từng ký tự của chuỗi thông qua chỉ mục: word[index]\n\nword = \"hello\"\n# Chiều từ trái qua phải\nword[2]\n\n'l'\n\n\n\n# Chiều từ phải qua trái, sd khi ko biết chính xác độ dài chuỗi\nword[-1]\n\n'o'\n\n\nString Slicing\n\nCú pháp: string[begin:end:step] - cắt chuỗi từ phần tử begin cho đến phần tử trước phần tử end, khoảng cách giữa các ký tự là step\n\n\nword[1:3]\n\n'el'\n\n\n\nword[2:]\n\n'llo'\n\n\n\n# Lấy cả chuỗi, cách 2 đơn vị\nword[::2]\n\n'hlo'\n\n\nString methods\n\ndept = 'Phòng Phân tích kinh doanh'\n\n\n# trả về dạng chữ thường\ndept.lower()\n\n'phòng phân tích kinh doanh'\n\n\nlower ở đây là 1 method - tức là 1 function được attached vào object - ở đây là object dept, chúng ta sẽ tìm hiểu thêm về method trong các phần sau, có thể hiểu đơn giản:\n\nPython objects như list, string, …. đều có các method mặc định được sử dụng để manipulate dữ liệu trong các object đó\nString object có string method, list có list method\n\n\n# trả về dạng chữ hoa\ndept.upper()\n\n'PHÒNG PHÂN TÍCH KINH DOANH'\n\n\n\n# Trả về một list các phần tử được tách bởi một dấu phân cách(delimiter) cho trước\ndept.split()\n\n['Phòng', 'Phân', 'tích', 'kinh', 'doanh']\n\n\n\n# Trả về một chuỗi được ghép bởi các phần tử từ một list, theo một dấu phân cách cho trước\n'xx'.join(['a', 'b', 'c'])\n\n'axxbxxc'\n\n\n\n#tìm kiếm ký tự - trả về vị trí của ký tự đầu tiên tìm được trong chuỗi\n# trả ra -1 nếu k tìm thấy\ndept.find('phòng')\n\n-1\n\n\n\n# Check xem chuỗi có bắt đầu bằng ký tự cho trước không\ndept.startswith('w')\n\nFalse\n\n\n\n# tương tự là endwith\ndept.endswith('doanh')\n\nTrue\n\n\n\n\n2.2.4 List\nLà kiểu dữ liệu linh hoạt nhất trong Python, là 1 tập hợp các phần tử - có thể cùng kiểu dữ liệu hoặc không, trong list các phần từ được sắp xếp và có thể thay đổi (mutable).\nKhởi tạo list\nĐể khởi tạo list, chúng ta dùng []\n\nx = [10, 'foo', False, 2.5] #các phần tử có kiểu dữ liệu không đồng nhất\ntype(x)\n\nlist\n\n\nhoặc hàm list():\n\ncolor = list(['xanh', 'đỏ', 'vàng'])\ncolor\n\n['xanh', 'đỏ', 'vàng']\n\n\nIndex của list được đánh theo nguyên tắc tương tự như string đã nêu ở trên\n\nx[1]\n\n'foo'\n\n\n\nx[-2]\n\nFalse\n\n\nList slicing\n\nCú pháp: list[begin:end:step]\n\n\nbegin: Chỉ mục của phần tử đầu tiên\nend: Chỉ mục của phần tử sau phần tử cuối cùng\nstep: Khoảng cách chỉ mục của các phần tử sẽ được lấy ra\n\n\nx[1:3]\n\n['foo', False]\n\n\n\nnumbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n\nnumbers[1:9:3] # cắt từ 1 đến trước 9, khoảng khách là 3\n\n[1, 4, 7]\n\n\n\nnumbers[::2] # lấy từ đầu đến cuối, khoảng cách là 2\n\n[0, 2, 4, 6, 8]\n\n\n\nnumbers[:2] # lấy 2 giá trị đầu\n\n[0, 1]\n\n\n\nnumbers[-3:] # lấy 3 giá trị cuối\n\n[7, 8, 9]\n\n\n\nnumbers[::-1] # đảo ngược giá trị của list\n\n[9, 8, 7, 6, 5, 4, 3, 2, 1, 0]\n\n\nThay đổi phần tử trong list\n\nskill_sets = ['sql', 'r', 'excel', 'python']\n\n\n# Thay đổi từ chỉ mục 2 đến hết\nskill_sets[2:] = ['spss']\nskill_sets\n\n['sql', 'r', 'spss']\n\n\n\n# chỉ mục 1 thay bằng 'vba'\nskill_sets[1] = 'vba'\nskill_sets\n\n['sql', 'vba', 'spss']\n\n\nList methods\nappend(): Thêm một phần tử vào list\n\nnumbers.append(15)\nnumbers\n\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 15]\n\n\npop: xóa phần tử trong list\n\nnumbers.pop(3) #xóa phần từ thứ 3\nnumbers\n\n[0, 1, 2, 4, 5, 6, 7, 8, 9, 15]\n\n\nextend(list2): Ghép một list mới vào list hiện tại\n\nnumbers.extend(['a', 'b', 'c'])\nnumbers\n\n[0, 1, 2, 4, 5, 6, 7, 8, 9, 15, 'a', 'b', 'c']\n\n\nsort: sắp xếp các phần tử theo thứ tự, reverse = True nếu muốn sort kiểu descending\n\nnumbers2 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nnumbers2.sort(reverse=True)\nnumbers2\n\n[9, 8, 7, 6, 5, 4, 3, 2, 1, 0]\n\n\nChi tiết hơn về method của list, chúng ta có thể xem tại đây\n\n\n2.2.5 Tuple\nHoàn toàn tương tự list, nhưng khác ở điểm Tuple là đối tượng bất biến (immutable) Để khởi tạo tuple, chúng ta dùng () thay vì []\n\ntuple1 = (\"Hanoi\", \"Hai Phong\", \"Tay Ninh\", \"Lam Dong\")\ntype(tuple1)\n\ntuple\n\n\n\ntuple2 = \"Hanoi\", \"Hai Phong\", \"Tay Ninh\", \"Lam Dong\"\ntype(tuple2)\n\ntuple\n\n\n\n# Khời tạo tuple rỗng\ntpl = ()\n#hoặc\ntpl2 = tuple()\nprint(type(tpl), type(tpl2))\n\n&lt;class 'tuple'&gt; &lt;class 'tuple'&gt;\n\n\nVì Tuple là bất biến nên chúng ta sẽ không có những hàm thay đổi cấu trúc như append(), pop(),.. như của List\n\nlist1 = [1, 2, 3]\ntuple1 = ('a', 'b', 'c')\n\n\nlist1[2] = \"a\"\nlist1\n\n[1, 2, 'a']\n\n\nCâu lệnh dưới đây sẽ báo lỗi vì tuple ko cho phép thay đổi 1 phần tử trong nó\n\ntuple1[1] = 1\ntuple1\n\nTypeError: 'tuple' object does not support item assignment\n\n\nCả tuple và list đều có thể unpacked như ở dưới:\n\nx, y, z = tuple1\ny\n\n'b'\n\n\nThao tác này khá tiện lợi và có tính ứng dụng cao sau này\n\n\n2.2.6 Sets & Dictionaries\nDictionary trong Python tương tự với từ điển ngoài đời thực, cũng bao gồm các cặp key - value (từ vựng - ý nghĩa). Key và Value được phân cách nhau bởi dấu hai chấm (:), các cặp key-value được phân cách nhau bởi dấu phẩy (,). Nhìn một cách tổng quát thì nó giống với Json\nDictionary là kiểu dữ liệu khả biến (mutable)\n\nd = {\n    'one':'một',\n    'two':'hai',\n    'three':'ba'}\ntype(d)\n\ndict\n\n\none, two, three là key còn một, hai, ba là value\nvalue trong dictionary có thể là bất kỳ kiểu dữ liệu nào: string, numbers, list…, tuy nhiên key thì phải là kiểu dữ liệu bất biến(immutable)\n\nd2 = {\n    'one': 0.5,\n    'two': [1, 2, 3],\n    'three': False}\ntype(d2)\n\ndict\n\n\nTruy vấn 1 phần tử trong dictionary\n\nd2['two']\n\n[1, 2, 3]\n\n\nThay đổi 1 phần tử trong dictionary\n\nd2['three'] = 3\nd2\n\n{'one': 0.5, 'two': [1, 2, 3], 'three': 3}\n\n\nThêm một phần tử\n\nd2['four'] = 4\nd2\n\n{'one': 0.5, 'two': [1, 2, 3], 'three': 3, 'four': 4}\n\n\nXóa 1 phần tử\n\ndel d2['two']\nd2\n\n{'one': 0.5, 'three': 3, 'four': 4}\n\n\ndictionary methods:\n\nd.items()\n\ndict_items([('one', 'một'), ('two', 'hai'), ('three', 'ba')])\n\n\n\nd.values()\n\ndict_values(['một', 'hai', 'ba'])\n\n\nSet là 1 tập hợp các phần tử không duplicate\n\ns1 = {'a', 'b', 3}\ntype(s1)\n\nset\n\n\n\ns2 = {1, 1, 2, 2, 2, 3, 3, 3}\ns2\n\n{1, 2, 3}\n\n\nSet có thể hứa nhiều kiểu dữ liệu khác nhau tuy nhiên các kiểu dữ liệu này phải immutable như Integer, Float, Boolean hay Tuple\n\nmix_set = { \"dbs_aad\", 34, (4, 5, 6) }\n\nPython sẽ báo lỗi nếu bạn đặt một biến khả biến trong Set, vd list\n\nmix_mutable_set = { \"Hải Phòng\", \"Hà Nội\", [ 2, 4 ] }\n\nTypeError: unhashable type: 'list'\n\n\nset methods\nadd() Thêm mới phần tử vào set\n\ns1.add('4')\ns1\n\n{3, '4', 'a', 'b'}\n\n\nremove: Xóa 1 phần tử\n\ns1.remove('4')\ns1\n\n{3, 'a', 'b'}\n\n\n\n# Kiểm tra s1 có phải tập con của s2 ko \ns1.issubset(s2)\n\nFalse\n\n\n\n# Kiểm tra tập giao giữa 2 tập con\ns1.intersection(s2)\n\n{3}"
  },
  {
    "objectID": "p01-02-gioi-thieu-co-ban-python.html#toán-tử---operators",
    "href": "p01-02-gioi-thieu-co-ban-python.html#toán-tử---operators",
    "title": "2  Các cấu trúc cơ bản trong Python",
    "section": "2.3 Toán tử - Operators",
    "text": "2.3 Toán tử - Operators\nCác toán tử liên quan đến số học như + - * / khá đơn giản nên chúng ta sẽ ko nhắc tới ở đây\n\n2.3.1 Toán tử so sánh - Comparison operators\n\nx, y = 1, 2\nx &lt; y\n\nTrue\n\n\n\nx &gt; y\n\nFalse\n\n\nChúng ta có thể so sánh 1 chuỗi các giá trị\n\n1 &lt; 2 &lt; 3\n\nTrue\n\n\n\n# hoặc \n1 &lt;= 2 &lt;= 3\n\nTrue\n\n\nGán biến bằng = và so sánh 2 giá trị bằng ==\n\nx = 1  #assignment\nx == 2 #comparison\n\nFalse\n\n\nSo sánh không bằng\n\nx != 2\n\nTrue\n\n\n\n\n2.3.2 Toán tử xác định - Identity operators\n\nta = \"Nguyen Tuan Anh\"\nha = ta\nta is ha\n\nTrue\n\n\n\nta is not ha\n\nFalse\n\n\nLưu ý: sự khác nhau giữa == và is, 2 toán tử này lần lượt kiểm tra độ equality và identical và cơ bản là ko giống nhau, check ví dụ dưới\n\nx = [1, 2, 3]\ny = [1, 2, 3]\nx == y # toán tử == kiểm tra tính ngang bằng - equality\n\nTrue\n\n\n\nx is y # toán tử is kiểm tra tính đồng nhất - identical\n\nFalse\n\n\nToán tử is sẽ trả ra True nếu một biến được gán từ 1 biến khác, ví dụ\n\nz = x\nz is x\n\nTrue\n\n\n\n\n2.3.3 Toán tử logic - Logical operators\nBao gồm 3 loại and, or, not\n\nTrue and False\n\nFalse\n\n\n\nnot False and True\n\nTrue\n\n\n\n1 &gt; 2 and 3 == 3\n\nFalse\n\n\n\n\n2.3.4 Toán tử thành viên - Membership operators\nin\n\n'x' in 'hanoi'\n\nFalse\n\n\nnot in\n\n'x' not in 'hanoi'\n\nTrue"
  },
  {
    "objectID": "p01-02-gioi-thieu-co-ban-python.html#điều-kiện",
    "href": "p01-02-gioi-thieu-co-ban-python.html#điều-kiện",
    "title": "2  Các cấu trúc cơ bản trong Python",
    "section": "2.4 Điều kiện",
    "text": "2.4 Điều kiện\nif\n\nif 1 &lt; 2:\n    print('Yep!')\n\nYep!\n\n\nIf else\n\nif 1 &gt; 2:\n    print('first')\nelse:\n    print('last')\n\nlast\n\n\nif else elif\n\nif 1 == 2:\n    print('first')\nelif 3 == 3:\n    print('middle')\nelse:\n    print('Last')\n\nmiddle\n\n\nLưu ý về code block & Indentation trong python\nTrong Python, tất cả code block (đoạn code nằm trong câu lệnh if, vòng lặp, hàm…) đều được lùi vào 1 khoảng, dòng trước code block sẽ được kết thúc bằng dấu :  VD câu lệnh dưới sẽ báo lỗi\n\nif 1 &lt; 2:\nprint('x')\n\nIndentationError: expected an indented block after 'if' statement on line 1 (365893955.py, line 2)\n\n\n\nCác câu lệnh trong cùng 1 block phải có cùng indentation\nIndentation theo chuẩn của Python là 4 dấu cách - hoặc tương đương 1 dấu Tab\n\nFollow rule này sẽ khiến code của chúng ta clean và rành mạch hơn nhất nhiều :)"
  },
  {
    "objectID": "p01-02-gioi-thieu-co-ban-python.html#vòng-lặp",
    "href": "p01-02-gioi-thieu-co-ban-python.html#vòng-lặp",
    "title": "2  Các cấu trúc cơ bản trong Python",
    "section": "2.5 Vòng lặp",
    "text": "2.5 Vòng lặp\n\n\n\nLoop\n\n\nẢnh từ PenJee\n\n2.5.1 while Loops\nwhile + print\n\na = 1\nwhile a &lt; 10:\n    print(a)\n    a += 2 # += tương đương với a = a + 2\n\n1\n3\n5\n7\n9\n\n\nwhile + if\n\na = 0\nwhile a &lt; 20:\n    if a % 5 == 0:\n        print('{x} chia hết cho 5'.format(x=a))\n    a += 1\n\n0 chia hết cho 5\n5 chia hết cho 5\n10 chia hết cho 5\n15 chia hết cho 5\n\n\nwhile + break\nVD: print số từ 1 - 9 cho đến khi gặp số chia hết cho 5\n\na = list(range(1, 10))\ni = 1\nwhile i &lt; max(a):\n    print(i)\n    if i % 5 == 0:\n        break\n    i += 1\n\n1\n2\n3\n4\n5\n\n\nwhile + else\nHàm else sẽ được thực hiện khi a không còn nhỏ hơn 10\n\na = 1\nwhile a &lt; 10:\n    print(a)\n    a += 2\nelse:\n    print ('End while')\n\n1\n3\n5\n7\n9\nEnd while\n\n\n\n\n2.5.2 for Loops\n\nanimals = ['dog', 'cat', 'bird']\nfor animal in animals:\n    print(\"The plural of \" + animal + \" is \" + animal + \"s\")\n\nThe plural of dog is dogs\nThe plural of cat is cats\nThe plural of bird is birds\n\n\nfor + else\n\nanimals = ['dog', 'cat', 'bird']\nfor animal in animals:\n    print('The plural of ' + animal + ' is ' + animal + 's')\nelse:\n    print('End for loop')\n\nThe plural of dog is dogs\nThe plural of cat is cats\nThe plural of bird is birds\nEnd for loop\n\n\n\n\n2.5.3 List comprehension\nList comprehension là cách tạo list đơn giản và nhẹ nhàng hơn sử dụng vòng lặp thông thường rất nhiều.\nCú pháp: &gt;[ expression for item in list if conditional ]\nVí dụ:\n\nx = list(range(10))\nx\n\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n\nChúng ta đang cần tạo 1 list y bằng cách lấy mỗi phần tử của list x nhân với 2\nCách làm thông thường - sử dụng vòng lặp:\n\ny = []\nfor i in x:    \n    y.append(i * 2)\ny    \n\n[0, 2, 4, 6, 8, 10, 12, 14, 16, 18]\n\n\nThay vì sử dụng vòng lặp như trên có thể dùng 1 câu lệnh\n\ny = [i * 2 for i in x]\ny\n\n[0, 2, 4, 6, 8, 10, 12, 14, 16, 18]\n\n\nĐể lọc thêm điều kiện chúng ta có thể sử dụng kết hợp với if ở cuối câu, vd như ở dưới ta chỉ lấy các phần tử của list chia hết cho 2\n\ny = [i * 2 for i in x if i % 2 == 0]\ny\n\n[0, 4, 8, 12, 16]\n\n\nTương tự với set comprehension, dictionary comprehension"
  },
  {
    "objectID": "p01-02-gioi-thieu-co-ban-python.html#hàm-trong-python",
    "href": "p01-02-gioi-thieu-co-ban-python.html#hàm-trong-python",
    "title": "2  Các cấu trúc cơ bản trong Python",
    "section": "2.6 Hàm trong Python",
    "text": "2.6 Hàm trong Python\n\n2.6.1 Built-in function\nPython cung cấp 1 số hàm cơ bản mà không cần phải import từ library nào, chúng ta sẽ tìm hiểu 1 số hàm cơ bản và thường xuyên sử dụng\nprint(): In 1 object ra console\n\nprint (\"Tôi muốn học Python trong 2 tuần\")\n\nTôi muốn học Python trong 2 tuần\n\n\nPrint có tham số\n\n# Cách 1 \nprint ('Tên tôi là %s và tôi %d tuổi' % ('Hoàng', 29)) # %s là để nhập string, #d để nhập decimal\n\nTên tôi là Hoàng và tôi 29 tuổi\n\n\n\n# Cách 2\nprint ('Tên tôi là {x} và tôi {y} tuổi'.format(x = 'Hoàng', y = 29))\n\nTên tôi là Hoàng và tôi 29 tuổi\n\n\nLưu ý: format là 1 string method để insert dữ liệu vào variables trong string\ntype(): trả về kiểu dữ liệu của 1 object\n\nx = 3\ntype(x)\n\nint\n\n\n\nperson = {\"name\": \"Nguyen Tuan Anh\", \"title\": \"Xam King\"}\ntype(person)\n\ndict\n\n\nlen(): trả về chiều dài hoặc số lượng phần tử của một đối tượng.\n\n# Trả về chiều dài của chuỗi\ndept = \"dbs_aad\"\nlen(dept)\n\n7\n\n\n\n# Trả về số phần tử trong một List\nlanguages = [\"Vietnamese\", \"English\"]\nlen(languages)\n\n2\n\n\nmax(): trả về giá trị lớn nhất, tương tự là min()\n\n# Trả về giá trị lớn nhất của một dãy số\nmax(1,2,4)\n\n4\n\n\n\n# Trả về giá trị của phần tử lớn nhất trong một List\nmax([1, 20, 18])\n\n20\n\n\nsum(): hàm tính tổng\n\nsum([1, 2, 3])\n\n6\n\n\nrange(): kết hợp với list hoặc tuple để tạo dãy số\n\nlist(range(0, 10))\n\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n\nzip(): combine từng item của 2 đối tượng theo thứ tự và trả ra kiểu dữ liệu là zip object, sau đó gọi lại kết quả bằng hàm list\n\nx = 'abc'\ny = 'def'\nz = zip(x,y)\nlist(z)\n\n[('a', 'd'), ('b', 'e'), ('c', 'f')]\n\n\n\ncountries = ('Japan', 'Korea', 'China')\ncities = ('Tokyo', 'Seoul', 'Beijing')\nfor country, city in zip(countries, cities):\n    print(f'The capital of {country} is {city}')\n\nThe capital of Japan is Tokyo\nThe capital of Korea is Seoul\nThe capital of China is Beijing\n\n\nCó thể sử dụng zip để tạo dictionary\n\nnames = ['Tom', 'John']\nmarks = ['E', 'F']\ndict(zip(names, marks))\n\n{'Tom': 'E', 'John': 'F'}\n\n\nHai hàm khác cũng thường xuyên sử dụng: any và all:\n\nany kiểm tra nếu có 1 phần tử là TRUE\nall kiểm tra nếu tất cả các phần tử đều là TRUE\n\n\nlist2 = [False, False, True]\nany(list2)\n\nTrue\n\n\n\nall(list2)\n\nFalse\n\n\nĐể tìm hiểu thêm các hàm hệ thống có thể tham khảo thêm tại đây\n\n\n2.6.2 User-defined function\nViết hàm để tái sử dụng code nhiều lần, có lẽ ai cũng nắm được mục tiêu cao cả này, để viết hàm trong Python chúng ta sử dụng cấu trúc def\nVí dụ: viết 1 hàm check số được đưa vào là âm hay dương\n\ndef check_num(x):\n    if x &lt; 0:\n        return 'negative'\n    return 'positive'\n\ncheck_num(2)\n\n'positive'\n\n\nThành phần của function trên bao gồm các phần chính: - def: keyword - phần check_num(x) là khai báo tên function và tên của biến đầu vào sử dụng trong function, 1 function có thể có biến đầu vào hoặc không &gt; lưu ý tên function tự tạo ko nên trùng với các hàm mặc định nếu ko sẽ gây lỗi - Phần indented là phần function body - nội dung chính của function - Phần return - cho phép hàm trả kết quả sau khi thực hiện xong, phần này có thể có hoặc không\nVD hàm dưới không có return nên khi thực hiện xong ko trả kết quả\n\ndef plus(x, y):\n    a = x + y    \nplus(3, 4)  # không có gì \n\nTrong quá trình chạy, khi gặp keyword return, function sẽ trả về giá trị và dừng thực hiện, dòng lệnh phía dưới return sẽ không được thực hiên\n\ndef divide(x, y):\n    print (\"Dividing...\")\n    return x/y\n    print (\"Done\")\n\ndivide(6, 3)\n\nDividing...\n\n\n2.0\n\n\nLưu ý: Biến khai báo trong function là local variable và chỉ có thể truy cập được bên trong function đó\nDocstring\nPython cho phép chúng ta add comment vào function, module… thông qua docstring\n\ndef square(x):\n    \"\"\"\n    Tính bình phương của 1 giá trị\n    \"\"\"\n    y = x**2\n    return y\n\nsquare(-1)\n\n1\n\n\n\nCó thể gọi help trong hàm\n\n\n?square\n\n\n\n2.6.3 Lambda expression\nLambda expression cho phép chúng ta tạo 1 function đơn giản chỉ trong 1 dòng mà ko cần khai báo theo cấu trúc def. Cấu trúc này tương tự như hàm lambda trong R\nVí dụ 2 hàm\n\n# function 1 \ndef minus(x, y):\n    a = x - y\n    return a\n# func2\nminus2 = lambda x, y: x-y # Dấu : tương đương với return\n\n\nminus(3, 4)\n\n-1\n\n\n\nminus2(3, 4)\n\n-1\n\n\nTheo quan điểm cá nhân, Lambda chỉ nên sử dụng trong một số trường hợp chúng ta muốn viết nhanh và tắt, không nên dùng khi logic của bạn phức tạp. Đặc biệt, lambda sẽ được sử dụng rất nhiều trong các câu lệnh map, filter, reduce như giới thiệu ở phần tiếp theo\n\n# Hàm xây dựng chuỗi n Fibonacci\ndef fib_n(n):\n    if n == 1:\n        my_list = list([0])\n    elif n == 2:\n        my_list = list([0, 1])\n    else: \n        my_list = list([0])\n        f0 = 0\n        f1 = 1\n        my_range = range(n-1)\n        for i in my_range:\n            f2 = f1 + f0\n            f0 = f1\n            f1 = f2\n            my_list.append(f2)\n    return(my_list)\n\n\nfib_n(10)\n\n[0, 1, 2, 3, 5, 8, 13, 21, 34, 55]\n\n\n\n\n2.6.4 map và filter\nKhi làm việc với kiểu dữ liệu mảng, vd như list, tuple…khi chúng ta cần áp dụng hàm lên cho từng phần tử của mảng này thì có thể sử dụng các hàm như map, filter. Nhóm hàm này tương tự nhự họ apply hoặc map trong R\n\nTrong R, các hàm có concept tương tự là các hàm họ apply: lapply, sapply…\n\nmap()\n\nmap(func, seq) map sẽ áp dụng hàm func cho mỗi phần tử của mảng và trả về kết quả.\n\n\nseq = [1, 2, 3, 4, 5]\n# sử dụng hàm square được định nghĩa ở trên \nsquare(seq)\n\nTypeError: unsupported operand type(s) for ** or pow(): 'list' and 'int'\n\n\nCâu lệnh trên sẽ báo lỗi vì ko thể sử dụng function 1 cách thông thường cho những object như list, tuple…Thay vì vậy ta có thể sử dụng như ở dưới\n\nseq2 = map(square, seq)\nlist(seq2) # hàm map sẽ trả ra map object, để trả kết quả ra list ta dùng hàm list\n\n[1, 4, 9, 16, 25]\n\n\nThay vì định nghĩa hàm square trước đó, chúng ta có thể kết hợp lambda expression luôn vào câu lệnh map ở trên\n\nseq3 = map(lambda x: x*x, seq)\nlist(seq3)\n\n[1, 4, 9, 16, 25]\n\n\nfilter()\n\n\nfilter(func, seq) gọi hàm với từng phần tử của mảng và trả về danh sách các phần tử mà hàm trả về True\nhàm trong filter chỉ có thể trả về True hoặc False\n\n\nVí dụ, ta lấy danh sách các phần tử là số chẵn trong list ở dưới\n\ndef check_even(x):\n    if x % 2 == 0:\n        return True\n    else:\n        return False\n\n\nlist(filter(check_even, seq))\n\n[2, 4]\n\n\nmap vs list comprehension ?\nChúng ta có thể thấy sự tương đồng rất lớn giữa map vừa nêu và list comprehension ở phần trên, vd như câu lệnh map ở trên có thể viết lại theo phong cách list comprehension như ở dưới\n\nseq4 = [x * x for x in seq]\nseq4\n\n[1, 4, 9, 16, 25]\n\n\n\n# sử dụng map\nseq3 = map(lambda x: x*x, seq)\nlist(seq3)\n\n[1, 4, 9, 16, 25]\n\n\nVậy khi nào thì sử dụng 1 trong 2 ?  Thực tế là ko có rule cụ thể nào cho việc này, chúng ta có thể sử dụng 1 số rule of thumb như sau: - Với những hàm đã được định nghĩa trước đó, sử dụng map thông thường sẽ nhanh hơn (và rõ ràng hơn) - Khi sử dụng expression, vd so sánh các phần tử với 1 giá trị, thông thường sử dụng list comprehension sẽ nhanh và rõ ràng hơn\nTest thử với hàm %timeit - hàm để check thời gian execution của 1 câu lệnh\n\n%timeit L = map(square, seq)\n\n143 ns ± 4.06 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n\n\n\n%timeit L = [x * x for x in seq]\n\n364 ns ± 9.79 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)"
  },
  {
    "objectID": "p01-02-gioi-thieu-co-ban-python.html#lưu-trữ-file",
    "href": "p01-02-gioi-thieu-co-ban-python.html#lưu-trữ-file",
    "title": "2  Các cấu trúc cơ bản trong Python",
    "section": "2.7 Lưu trữ file",
    "text": "2.7 Lưu trữ file\nĐể ghi file, ta phải tạo object và lưu trữ kết quả vào file mới được tạo.\n\nmy_file = open('output.txt', 'w') # w is write\n\n\nlines = 'This is my first example'\nmy_file.write(lines)\n\n24\n\n\nNgoài ra, Python cho phép sử dụng library pickle để lưu trữ bất kỳ loại file nào\n\nimport pickle\n\n\nt = [1,2,3]\ns = pickle.dumps(t) # dumps: dump string\n\n\nmy_load = pickle.loads(s) #loads: loads string"
  },
  {
    "objectID": "p01-02-gioi-thieu-co-ban-python.html#pipe-object",
    "href": "p01-02-gioi-thieu-co-ban-python.html#pipe-object",
    "title": "2  Các cấu trúc cơ bản trong Python",
    "section": "2.8 Pipe object",
    "text": "2.8 Pipe object\nBất kỳ phần mềm nào có thể khởi động từ shell đều có thể khởi động từ Python sử dụng pipe object\n\nimport os\ncmd = 'dir'\nos.popen(cmd)\n\n&lt;os._wrap_close at 0x26d911af550&gt;"
  },
  {
    "objectID": "p01-02-gioi-thieu-co-ban-python.html#các-vấn-đề-khác",
    "href": "p01-02-gioi-thieu-co-ban-python.html#các-vấn-đề-khác",
    "title": "2  Các cấu trúc cơ bản trong Python",
    "section": "2.9 Các vấn đề khác",
    "text": "2.9 Các vấn đề khác\n\n# Kiểm tra thư mục làm việc\nimport os as os\n\n\nos.getcwd()\n\n'D:\\\\OneDrive\\\\01-ds-book\\\\02-python-book'\n\n\n\n# Kiểm tra các biến trong môi trường làm việc\nglobals()\n\n{'__name__': '__main__',\n '__builtin__': &lt;module 'builtins' (built-in)&gt;,\n '__builtins__': &lt;module 'builtins' (built-in)&gt;,\n '_ih': ['',\n  'x = 20\\nx',\n  'x = True\\nx',\n  'x = 100 &lt; 2\\nx',\n  'type(x)',\n  'True + False',\n  'y = [False, False, True, True] # List boolean value\\nsum(y)',\n  'a, b = 1, 2\\nc, d = 2.5, 10.0\\ntype(a)',\n  'type(d)',\n  'x = 2\\nx * 2',\n  'x',\n  '# Gtri chỉ thay đổi khi gán vào 1 biến mới\\nx = x * 2\\nx',\n  '# Có thể nhập bằng single quote hoặc double quote\\na = \\'single quotes\\'\\nb = \"single quotes\"\\na == b',\n  '#hoặc cả 2\\nc = \"i\\'m a man\"\\nc',\n  'word = \"hello\"\\nword[0]',\n  'word = \"hello\"\\n# Chiều từ trái qua phải\\nword[2]',\n  '# Chiều từ phải qua trái, sd khi ko biết chính xác độ dài chuỗi\\nword[-1]',\n  'word[1:3]',\n  'word[2:]',\n  '# Lấy cả chuỗi, cách 2 đơn vị\\nword[::2]',\n  \"dept = 'Phòng Phân tích kinh doanh'\",\n  '# trả về dạng chữ thường\\ndept.lower()',\n  '# trả về dạng chữ hoa\\ndept.upper()',\n  '# Trả về một list các phần tử được tách bởi một dấu phân cách(delimiter) cho trước\\ndept.split()',\n  \"# Trả về một chuỗi được ghép bởi các phần tử từ một list, theo một dấu phân cách cho trước\\n'xx'.join(['a', 'b', 'c'])\",\n  \"#tìm kiếm ký tự - trả về vị trí của ký tự đầu tiên tìm được trong chuỗi\\n# trả ra -1 nếu k tìm thấy\\ndept.find('phòng')\",\n  \"# Check xem chuỗi có bắt đầu bằng ký tự cho trước không\\ndept.startswith('w')\",\n  \"# tương tự là endwith\\ndept.endswith('doanh')\",\n  \"x = [10, 'foo', False, 2.5] #các phần tử có kiểu dữ liệu không đồng nhất\\ntype(x)\",\n  \"color = list(['xanh', 'đỏ', 'vàng'])\\ncolor\",\n  'x[1]',\n  'x[-2]',\n  'x[1:3]',\n  'numbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]',\n  'numbers[1:9:3] # cắt từ 1 đến trước 9, khoảng khách là 3',\n  'numbers[::2] # lấy từ đầu đến cuối, khoảng cách là 2',\n  'numbers[:2] # lấy 2 giá trị đầu',\n  'numbers[-3:] # lấy 3 giá trị cuối',\n  'numbers[::-1] # đảo ngược giá trị của list',\n  \"skill_sets = ['sql', 'r', 'excel', 'python']\",\n  \"# Thay đổi từ chỉ mục 2 đến hết\\nskill_sets[2:] = ['spss']\\nskill_sets\",\n  \"# chỉ mục 1 thay bằng 'vba'\\nskill_sets[1] = 'vba'\\nskill_sets\",\n  'numbers.append(15)\\nnumbers',\n  'numbers.pop(3) #xóa phần từ thứ 3\\nnumbers',\n  \"numbers.extend(['a', 'b', 'c'])\\nnumbers\",\n  'numbers2 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\\nnumbers2.sort(reverse=True)\\nnumbers2',\n  'tuple1 = (\"Hanoi\", \"Hai Phong\", \"Tay Ninh\", \"Lam Dong\")\\ntype(tuple1)',\n  'tuple2 = \"Hanoi\", \"Hai Phong\", \"Tay Ninh\", \"Lam Dong\"\\ntype(tuple2)',\n  '# Khời tạo tuple rỗng\\ntpl = ()\\n#hoặc\\ntpl2 = tuple()\\nprint(type(tpl), type(tpl2))',\n  \"list1 = [1, 2, 3]\\ntuple1 = ('a', 'b', 'c')\",\n  'list1[2] = \"a\"\\nlist1',\n  'tuple1[1] = 1\\ntuple1',\n  'x, y, z = tuple1\\ny',\n  \"d = {\\n    'one':'một',\\n    'two':'hai',\\n    'three':'ba'}\\ntype(d)\",\n  \"d2 = {\\n    'one': 0.5,\\n    'two': [1, 2, 3],\\n    'three': False}\\ntype(d2)\",\n  \"d2['two']\",\n  \"d2['three'] = 3\\nd2\",\n  \"d2['four'] = 4\\nd2\",\n  \"del d2['two']\\nd2\",\n  'd.items()',\n  'd.values()',\n  \"s1 = {'a', 'b', 3}\\ntype(s1)\",\n  's2 = {1, 1, 2, 2, 2, 3, 3, 3}\\ns2',\n  'mix_set = { \"dbs_aad\", 34, (4, 5, 6) }',\n  'mix_mutable_set = { \"Hải Phòng\", \"Hà Nội\", [ 2, 4 ] }',\n  \"s1.add('4')\\ns1\",\n  \"s1.remove('4')\\ns1\",\n  '# Kiểm tra s1 có phải tập con của s2 ko \\ns1.issubset(s2)',\n  '# Kiểm tra tập giao giữa 2 tập con\\ns1.intersection(s2)',\n  'x, y = 1, 2\\nx &lt; y',\n  'x &gt; y',\n  '1 &lt; 2 &lt; 3',\n  '# hoặc \\n1 &lt;= 2 &lt;= 3',\n  'x = 1  #assignment\\nx == 2 #comparison',\n  'x != 2',\n  'ta = \"Nguyen Tuan Anh\"\\nha = ta\\nta is ha',\n  'ta is not ha',\n  'x = [1, 2, 3]\\ny = [1, 2, 3]\\nx == y # toán tử == kiểm tra tính ngang bằng - equality',\n  'x is y # toán tử is kiểm tra tính đồng nhất - identical',\n  'z = x\\nz is x',\n  'True and False',\n  'not False and True',\n  '1 &gt; 2 and 3 == 3',\n  \"'x' in 'hanoi'\",\n  \"'x' not in 'hanoi'\",\n  \"if 1 &lt; 2:\\n    print('Yep!')\",\n  \"if 1 &gt; 2:\\n    print('first')\\nelse:\\n    print('last')\",\n  \"if 1 == 2:\\n    print('first')\\nelif 3 == 3:\\n    print('middle')\\nelse:\\n    print('Last')\",\n  \"if 1 &lt; 2:\\nprint('x')\",\n  'a = 1\\nwhile a &lt; 10:\\n    print(a)\\n    a += 2 # += tương đương với a = a + 2',\n  \"a = 0\\nwhile a &lt; 20:\\n    if a % 5 == 0:\\n        print('{x} chia hết cho 5'.format(x=a))\\n    a += 1\",\n  'a = list(range(1, 10))\\ni = 1\\nwhile i &lt; max(a):\\n    print(i)\\n    if i % 5 == 0:\\n        break\\n    i += 1',\n  \"a = 1\\nwhile a &lt; 10:\\n    print(a)\\n    a += 2\\nelse:\\n    print ('End while')\",\n  'animals = [\\'dog\\', \\'cat\\', \\'bird\\']\\nfor animal in animals:\\n    print(\"The plural of \" + animal + \" is \" + animal + \"s\")',\n  \"animals = ['dog', 'cat', 'bird']\\nfor animal in animals:\\n    print('The plural of ' + animal + ' is ' + animal + 's')\\nelse:\\n    print('End for loop')\",\n  'x = list(range(10))\\nx',\n  'y = []\\nfor i in x:    \\n    y.append(i * 2)\\ny    ',\n  'y = [i * 2 for i in x]\\ny',\n  'y = [i * 2 for i in x if i % 2 == 0]\\ny',\n  'print (\"Tôi muốn học Python trong 2 tuần\")',\n  \"# Cách 1 \\nprint ('Tên tôi là %s và tôi %d tuổi' % ('Hoàng', 29)) # %s là để nhập string, #d để nhập decimal\",\n  \"# Cách 2\\nprint ('Tên tôi là {x} và tôi {y} tuổi'.format(x = 'Hoàng', y = 29))\",\n  'x = 3\\ntype(x)',\n  'person = {\"name\": \"Nguyen Tuan Anh\", \"title\": \"Xam King\"}\\ntype(person)',\n  '# Trả về chiều dài của chuỗi\\ndept = \"dbs_aad\"\\nlen(dept)',\n  '# Trả về số phần tử trong một List\\nlanguages = [\"Vietnamese\", \"English\"]\\nlen(languages)',\n  '# Trả về giá trị lớn nhất của một dãy số\\nmax(1,2,4)',\n  '# Trả về giá trị của phần tử lớn nhất trong một List\\nmax([1, 20, 18])',\n  'sum([1, 2, 3])',\n  'list(range(0, 10))',\n  \"x = 'abc'\\ny = 'def'\\nz = zip(x,y)\\nlist(z)\",\n  \"countries = ('Japan', 'Korea', 'China')\\ncities = ('Tokyo', 'Seoul', 'Beijing')\\nfor country, city in zip(countries, cities):\\n    print(f'The capital of {country} is {city}')\",\n  \"names = ['Tom', 'John']\\nmarks = ['E', 'F']\\ndict(zip(names, marks))\",\n  'list2 = [False, False, True]\\nany(list2)',\n  'all(list2)',\n  \"def check_num(x):\\n    if x &lt; 0:\\n        return 'negative'\\n    return 'positive'\\n\\ncheck_num(2)\",\n  'def plus(x, y):\\n    a = x + y    \\nplus(3, 4)  # không có gì ',\n  'def divide(x, y):\\n    print (\"Dividing...\")\\n    return x/y\\n    print (\"Done\")\\n\\ndivide(6, 3)',\n  'def square(x):\\n    \"\"\"\\n    Tính bình phương của 1 giá trị\\n    \"\"\"\\n    y = x**2\\n    return y\\n\\nsquare(-1)',\n  '# function 1 \\ndef minus(x, y):\\n    a = x - y\\n    return a\\n# func2\\nminus2 = lambda x, y: x-y # Dấu : tương đương với return',\n  'minus(3, 4)',\n  'minus2(3, 4)',\n  '# Hàm xây dựng chuỗi n Fibonacci\\ndef fib_n(n):\\n    if n == 1:\\n        my_list = list([0])\\n    elif n == 2:\\n        my_list = list([0, 1])\\n    else: \\n        my_list = list([0])\\n        f0 = 0\\n        f1 = 1\\n        my_range = range(n-1)\\n        for i in my_range:\\n            f2 = f1 + f0\\n            f0 = f1\\n            f1 = f2\\n            my_list.append(f2)\\n    return(my_list)',\n  'fib_n(10)',\n  'seq = [1, 2, 3, 4, 5]\\n# sử dụng hàm square được định nghĩa ở trên \\nsquare(seq)',\n  'seq2 = map(square, seq)\\nlist(seq2) # hàm map sẽ trả ra map object, để trả kết quả ra list ta dùng hàm list',\n  'seq3 = map(lambda x: x*x, seq)\\nlist(seq3)',\n  'def check_even(x):\\n    if x % 2 == 0:\\n        return True\\n    else:\\n        return False',\n  'list(filter(check_even, seq))',\n  'seq4 = [x * x for x in seq]\\nseq4',\n  '# sử dụng map\\nseq3 = map(lambda x: x*x, seq)\\nlist(seq3)',\n  \"get_ipython().run_line_magic('timeit', 'L = map(square, seq)')\",\n  \"get_ipython().run_line_magic('timeit', 'L = [x * x for x in seq]')\",\n  \"my_file = open('output.txt', 'w') # w is write\",\n  \"lines = 'This is my first example'\\nmy_file.write(lines)\",\n  'import pickle',\n  't = [1,2,3]\\ns = pickle.dumps(t) # dumps: dump string',\n  'my_load = pickle.loads(s) #loads: loads string',\n  \"import os\\ncmd = 'dir'\\nos.popen(cmd)\",\n  '# Kiểm tra thư mục làm việc\\nimport os as os',\n  'os.getcwd()',\n  '# Kiểm tra các biến trong môi trường làm việc\\nglobals()'],\n '_oh': {1: 20,\n  2: True,\n  3: False,\n  4: bool,\n  5: 1,\n  6: 2,\n  7: int,\n  8: float,\n  9: 4,\n  10: 2,\n  11: 4,\n  12: True,\n  13: \"i'm a man\",\n  14: 'h',\n  15: 'l',\n  16: 'o',\n  17: 'el',\n  18: 'llo',\n  19: 'hlo',\n  21: 'phòng phân tích kinh doanh',\n  22: 'PHÒNG PHÂN TÍCH KINH DOANH',\n  23: ['Phòng', 'Phân', 'tích', 'kinh', 'doanh'],\n  24: 'axxbxxc',\n  25: -1,\n  26: False,\n  27: True,\n  28: list,\n  29: ['xanh', 'đỏ', 'vàng'],\n  30: 'foo',\n  31: False,\n  32: ['foo', False],\n  34: [1, 4, 7],\n  35: [0, 2, 4, 6, 8],\n  36: [0, 1],\n  37: [7, 8, 9],\n  38: [9, 8, 7, 6, 5, 4, 3, 2, 1, 0],\n  40: ['sql', 'vba', 'spss'],\n  41: ['sql', 'vba', 'spss'],\n  42: [0, 1, 2, 4, 5, 6, 7, 8, 9, 15, 'a', 'b', 'c'],\n  43: [0, 1, 2, 4, 5, 6, 7, 8, 9, 15, 'a', 'b', 'c'],\n  44: [0, 1, 2, 4, 5, 6, 7, 8, 9, 15, 'a', 'b', 'c'],\n  45: [9, 8, 7, 6, 5, 4, 3, 2, 1, 0],\n  46: tuple,\n  47: tuple,\n  50: [1, 2, 'a'],\n  52: 'b',\n  53: dict,\n  54: dict,\n  55: [1, 2, 3],\n  56: {'one': 0.5, 'three': 3, 'four': 4},\n  57: {'one': 0.5, 'three': 3, 'four': 4},\n  58: {'one': 0.5, 'three': 3, 'four': 4},\n  59: dict_items([('one', 'một'), ('two', 'hai'), ('three', 'ba')]),\n  60: dict_values(['một', 'hai', 'ba']),\n  61: set,\n  62: {1, 2, 3},\n  65: {3, 'a', 'b'},\n  66: {3, 'a', 'b'},\n  67: False,\n  68: {3},\n  69: True,\n  70: False,\n  71: True,\n  72: True,\n  73: False,\n  74: True,\n  75: True,\n  76: False,\n  77: True,\n  78: False,\n  79: True,\n  80: False,\n  81: True,\n  82: False,\n  83: False,\n  84: True,\n  95: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9],\n  96: [0, 2, 4, 6, 8, 10, 12, 14, 16, 18],\n  97: [0, 2, 4, 6, 8, 10, 12, 14, 16, 18],\n  98: [0, 4, 8, 12, 16],\n  102: int,\n  103: dict,\n  104: 7,\n  105: 2,\n  106: 4,\n  107: 20,\n  108: 6,\n  109: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9],\n  110: [('a', 'd'), ('b', 'e'), ('c', 'f')],\n  112: {'Tom': 'E', 'John': 'F'},\n  113: True,\n  114: False,\n  115: 'positive',\n  117: 2.0,\n  118: 1,\n  120: -1,\n  121: -1,\n  123: [0, 1, 2, 3, 5, 8, 13, 21, 34, 55],\n  125: [1, 4, 9, 16, 25],\n  126: [1, 4, 9, 16, 25],\n  128: [2, 4],\n  129: [1, 4, 9, 16, 25],\n  130: [1, 4, 9, 16, 25],\n  134: 24,\n  138: &lt;os._wrap_close at 0x26d911af550&gt;,\n  140: 'D:\\\\OneDrive\\\\01-ds-book\\\\02-python-book'},\n '_dh': [WindowsPath('D:/OneDrive/01-ds-book/02-python-book')],\n 'In': ['',\n  'x = 20\\nx',\n  'x = True\\nx',\n  'x = 100 &lt; 2\\nx',\n  'type(x)',\n  'True + False',\n  'y = [False, False, True, True] # List boolean value\\nsum(y)',\n  'a, b = 1, 2\\nc, d = 2.5, 10.0\\ntype(a)',\n  'type(d)',\n  'x = 2\\nx * 2',\n  'x',\n  '# Gtri chỉ thay đổi khi gán vào 1 biến mới\\nx = x * 2\\nx',\n  '# Có thể nhập bằng single quote hoặc double quote\\na = \\'single quotes\\'\\nb = \"single quotes\"\\na == b',\n  '#hoặc cả 2\\nc = \"i\\'m a man\"\\nc',\n  'word = \"hello\"\\nword[0]',\n  'word = \"hello\"\\n# Chiều từ trái qua phải\\nword[2]',\n  '# Chiều từ phải qua trái, sd khi ko biết chính xác độ dài chuỗi\\nword[-1]',\n  'word[1:3]',\n  'word[2:]',\n  '# Lấy cả chuỗi, cách 2 đơn vị\\nword[::2]',\n  \"dept = 'Phòng Phân tích kinh doanh'\",\n  '# trả về dạng chữ thường\\ndept.lower()',\n  '# trả về dạng chữ hoa\\ndept.upper()',\n  '# Trả về một list các phần tử được tách bởi một dấu phân cách(delimiter) cho trước\\ndept.split()',\n  \"# Trả về một chuỗi được ghép bởi các phần tử từ một list, theo một dấu phân cách cho trước\\n'xx'.join(['a', 'b', 'c'])\",\n  \"#tìm kiếm ký tự - trả về vị trí của ký tự đầu tiên tìm được trong chuỗi\\n# trả ra -1 nếu k tìm thấy\\ndept.find('phòng')\",\n  \"# Check xem chuỗi có bắt đầu bằng ký tự cho trước không\\ndept.startswith('w')\",\n  \"# tương tự là endwith\\ndept.endswith('doanh')\",\n  \"x = [10, 'foo', False, 2.5] #các phần tử có kiểu dữ liệu không đồng nhất\\ntype(x)\",\n  \"color = list(['xanh', 'đỏ', 'vàng'])\\ncolor\",\n  'x[1]',\n  'x[-2]',\n  'x[1:3]',\n  'numbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]',\n  'numbers[1:9:3] # cắt từ 1 đến trước 9, khoảng khách là 3',\n  'numbers[::2] # lấy từ đầu đến cuối, khoảng cách là 2',\n  'numbers[:2] # lấy 2 giá trị đầu',\n  'numbers[-3:] # lấy 3 giá trị cuối',\n  'numbers[::-1] # đảo ngược giá trị của list',\n  \"skill_sets = ['sql', 'r', 'excel', 'python']\",\n  \"# Thay đổi từ chỉ mục 2 đến hết\\nskill_sets[2:] = ['spss']\\nskill_sets\",\n  \"# chỉ mục 1 thay bằng 'vba'\\nskill_sets[1] = 'vba'\\nskill_sets\",\n  'numbers.append(15)\\nnumbers',\n  'numbers.pop(3) #xóa phần từ thứ 3\\nnumbers',\n  \"numbers.extend(['a', 'b', 'c'])\\nnumbers\",\n  'numbers2 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\\nnumbers2.sort(reverse=True)\\nnumbers2',\n  'tuple1 = (\"Hanoi\", \"Hai Phong\", \"Tay Ninh\", \"Lam Dong\")\\ntype(tuple1)',\n  'tuple2 = \"Hanoi\", \"Hai Phong\", \"Tay Ninh\", \"Lam Dong\"\\ntype(tuple2)',\n  '# Khời tạo tuple rỗng\\ntpl = ()\\n#hoặc\\ntpl2 = tuple()\\nprint(type(tpl), type(tpl2))',\n  \"list1 = [1, 2, 3]\\ntuple1 = ('a', 'b', 'c')\",\n  'list1[2] = \"a\"\\nlist1',\n  'tuple1[1] = 1\\ntuple1',\n  'x, y, z = tuple1\\ny',\n  \"d = {\\n    'one':'một',\\n    'two':'hai',\\n    'three':'ba'}\\ntype(d)\",\n  \"d2 = {\\n    'one': 0.5,\\n    'two': [1, 2, 3],\\n    'three': False}\\ntype(d2)\",\n  \"d2['two']\",\n  \"d2['three'] = 3\\nd2\",\n  \"d2['four'] = 4\\nd2\",\n  \"del d2['two']\\nd2\",\n  'd.items()',\n  'd.values()',\n  \"s1 = {'a', 'b', 3}\\ntype(s1)\",\n  's2 = {1, 1, 2, 2, 2, 3, 3, 3}\\ns2',\n  'mix_set = { \"dbs_aad\", 34, (4, 5, 6) }',\n  'mix_mutable_set = { \"Hải Phòng\", \"Hà Nội\", [ 2, 4 ] }',\n  \"s1.add('4')\\ns1\",\n  \"s1.remove('4')\\ns1\",\n  '# Kiểm tra s1 có phải tập con của s2 ko \\ns1.issubset(s2)',\n  '# Kiểm tra tập giao giữa 2 tập con\\ns1.intersection(s2)',\n  'x, y = 1, 2\\nx &lt; y',\n  'x &gt; y',\n  '1 &lt; 2 &lt; 3',\n  '# hoặc \\n1 &lt;= 2 &lt;= 3',\n  'x = 1  #assignment\\nx == 2 #comparison',\n  'x != 2',\n  'ta = \"Nguyen Tuan Anh\"\\nha = ta\\nta is ha',\n  'ta is not ha',\n  'x = [1, 2, 3]\\ny = [1, 2, 3]\\nx == y # toán tử == kiểm tra tính ngang bằng - equality',\n  'x is y # toán tử is kiểm tra tính đồng nhất - identical',\n  'z = x\\nz is x',\n  'True and False',\n  'not False and True',\n  '1 &gt; 2 and 3 == 3',\n  \"'x' in 'hanoi'\",\n  \"'x' not in 'hanoi'\",\n  \"if 1 &lt; 2:\\n    print('Yep!')\",\n  \"if 1 &gt; 2:\\n    print('first')\\nelse:\\n    print('last')\",\n  \"if 1 == 2:\\n    print('first')\\nelif 3 == 3:\\n    print('middle')\\nelse:\\n    print('Last')\",\n  \"if 1 &lt; 2:\\nprint('x')\",\n  'a = 1\\nwhile a &lt; 10:\\n    print(a)\\n    a += 2 # += tương đương với a = a + 2',\n  \"a = 0\\nwhile a &lt; 20:\\n    if a % 5 == 0:\\n        print('{x} chia hết cho 5'.format(x=a))\\n    a += 1\",\n  'a = list(range(1, 10))\\ni = 1\\nwhile i &lt; max(a):\\n    print(i)\\n    if i % 5 == 0:\\n        break\\n    i += 1',\n  \"a = 1\\nwhile a &lt; 10:\\n    print(a)\\n    a += 2\\nelse:\\n    print ('End while')\",\n  'animals = [\\'dog\\', \\'cat\\', \\'bird\\']\\nfor animal in animals:\\n    print(\"The plural of \" + animal + \" is \" + animal + \"s\")',\n  \"animals = ['dog', 'cat', 'bird']\\nfor animal in animals:\\n    print('The plural of ' + animal + ' is ' + animal + 's')\\nelse:\\n    print('End for loop')\",\n  'x = list(range(10))\\nx',\n  'y = []\\nfor i in x:    \\n    y.append(i * 2)\\ny    ',\n  'y = [i * 2 for i in x]\\ny',\n  'y = [i * 2 for i in x if i % 2 == 0]\\ny',\n  'print (\"Tôi muốn học Python trong 2 tuần\")',\n  \"# Cách 1 \\nprint ('Tên tôi là %s và tôi %d tuổi' % ('Hoàng', 29)) # %s là để nhập string, #d để nhập decimal\",\n  \"# Cách 2\\nprint ('Tên tôi là {x} và tôi {y} tuổi'.format(x = 'Hoàng', y = 29))\",\n  'x = 3\\ntype(x)',\n  'person = {\"name\": \"Nguyen Tuan Anh\", \"title\": \"Xam King\"}\\ntype(person)',\n  '# Trả về chiều dài của chuỗi\\ndept = \"dbs_aad\"\\nlen(dept)',\n  '# Trả về số phần tử trong một List\\nlanguages = [\"Vietnamese\", \"English\"]\\nlen(languages)',\n  '# Trả về giá trị lớn nhất của một dãy số\\nmax(1,2,4)',\n  '# Trả về giá trị của phần tử lớn nhất trong một List\\nmax([1, 20, 18])',\n  'sum([1, 2, 3])',\n  'list(range(0, 10))',\n  \"x = 'abc'\\ny = 'def'\\nz = zip(x,y)\\nlist(z)\",\n  \"countries = ('Japan', 'Korea', 'China')\\ncities = ('Tokyo', 'Seoul', 'Beijing')\\nfor country, city in zip(countries, cities):\\n    print(f'The capital of {country} is {city}')\",\n  \"names = ['Tom', 'John']\\nmarks = ['E', 'F']\\ndict(zip(names, marks))\",\n  'list2 = [False, False, True]\\nany(list2)',\n  'all(list2)',\n  \"def check_num(x):\\n    if x &lt; 0:\\n        return 'negative'\\n    return 'positive'\\n\\ncheck_num(2)\",\n  'def plus(x, y):\\n    a = x + y    \\nplus(3, 4)  # không có gì ',\n  'def divide(x, y):\\n    print (\"Dividing...\")\\n    return x/y\\n    print (\"Done\")\\n\\ndivide(6, 3)',\n  'def square(x):\\n    \"\"\"\\n    Tính bình phương của 1 giá trị\\n    \"\"\"\\n    y = x**2\\n    return y\\n\\nsquare(-1)',\n  '# function 1 \\ndef minus(x, y):\\n    a = x - y\\n    return a\\n# func2\\nminus2 = lambda x, y: x-y # Dấu : tương đương với return',\n  'minus(3, 4)',\n  'minus2(3, 4)',\n  '# Hàm xây dựng chuỗi n Fibonacci\\ndef fib_n(n):\\n    if n == 1:\\n        my_list = list([0])\\n    elif n == 2:\\n        my_list = list([0, 1])\\n    else: \\n        my_list = list([0])\\n        f0 = 0\\n        f1 = 1\\n        my_range = range(n-1)\\n        for i in my_range:\\n            f2 = f1 + f0\\n            f0 = f1\\n            f1 = f2\\n            my_list.append(f2)\\n    return(my_list)',\n  'fib_n(10)',\n  'seq = [1, 2, 3, 4, 5]\\n# sử dụng hàm square được định nghĩa ở trên \\nsquare(seq)',\n  'seq2 = map(square, seq)\\nlist(seq2) # hàm map sẽ trả ra map object, để trả kết quả ra list ta dùng hàm list',\n  'seq3 = map(lambda x: x*x, seq)\\nlist(seq3)',\n  'def check_even(x):\\n    if x % 2 == 0:\\n        return True\\n    else:\\n        return False',\n  'list(filter(check_even, seq))',\n  'seq4 = [x * x for x in seq]\\nseq4',\n  '# sử dụng map\\nseq3 = map(lambda x: x*x, seq)\\nlist(seq3)',\n  \"get_ipython().run_line_magic('timeit', 'L = map(square, seq)')\",\n  \"get_ipython().run_line_magic('timeit', 'L = [x * x for x in seq]')\",\n  \"my_file = open('output.txt', 'w') # w is write\",\n  \"lines = 'This is my first example'\\nmy_file.write(lines)\",\n  'import pickle',\n  't = [1,2,3]\\ns = pickle.dumps(t) # dumps: dump string',\n  'my_load = pickle.loads(s) #loads: loads string',\n  \"import os\\ncmd = 'dir'\\nos.popen(cmd)\",\n  '# Kiểm tra thư mục làm việc\\nimport os as os',\n  'os.getcwd()',\n  '# Kiểm tra các biến trong môi trường làm việc\\nglobals()'],\n 'Out': {1: 20,\n  2: True,\n  3: False,\n  4: bool,\n  5: 1,\n  6: 2,\n  7: int,\n  8: float,\n  9: 4,\n  10: 2,\n  11: 4,\n  12: True,\n  13: \"i'm a man\",\n  14: 'h',\n  15: 'l',\n  16: 'o',\n  17: 'el',\n  18: 'llo',\n  19: 'hlo',\n  21: 'phòng phân tích kinh doanh',\n  22: 'PHÒNG PHÂN TÍCH KINH DOANH',\n  23: ['Phòng', 'Phân', 'tích', 'kinh', 'doanh'],\n  24: 'axxbxxc',\n  25: -1,\n  26: False,\n  27: True,\n  28: list,\n  29: ['xanh', 'đỏ', 'vàng'],\n  30: 'foo',\n  31: False,\n  32: ['foo', False],\n  34: [1, 4, 7],\n  35: [0, 2, 4, 6, 8],\n  36: [0, 1],\n  37: [7, 8, 9],\n  38: [9, 8, 7, 6, 5, 4, 3, 2, 1, 0],\n  40: ['sql', 'vba', 'spss'],\n  41: ['sql', 'vba', 'spss'],\n  42: [0, 1, 2, 4, 5, 6, 7, 8, 9, 15, 'a', 'b', 'c'],\n  43: [0, 1, 2, 4, 5, 6, 7, 8, 9, 15, 'a', 'b', 'c'],\n  44: [0, 1, 2, 4, 5, 6, 7, 8, 9, 15, 'a', 'b', 'c'],\n  45: [9, 8, 7, 6, 5, 4, 3, 2, 1, 0],\n  46: tuple,\n  47: tuple,\n  50: [1, 2, 'a'],\n  52: 'b',\n  53: dict,\n  54: dict,\n  55: [1, 2, 3],\n  56: {'one': 0.5, 'three': 3, 'four': 4},\n  57: {'one': 0.5, 'three': 3, 'four': 4},\n  58: {'one': 0.5, 'three': 3, 'four': 4},\n  59: dict_items([('one', 'một'), ('two', 'hai'), ('three', 'ba')]),\n  60: dict_values(['một', 'hai', 'ba']),\n  61: set,\n  62: {1, 2, 3},\n  65: {3, 'a', 'b'},\n  66: {3, 'a', 'b'},\n  67: False,\n  68: {3},\n  69: True,\n  70: False,\n  71: True,\n  72: True,\n  73: False,\n  74: True,\n  75: True,\n  76: False,\n  77: True,\n  78: False,\n  79: True,\n  80: False,\n  81: True,\n  82: False,\n  83: False,\n  84: True,\n  95: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9],\n  96: [0, 2, 4, 6, 8, 10, 12, 14, 16, 18],\n  97: [0, 2, 4, 6, 8, 10, 12, 14, 16, 18],\n  98: [0, 4, 8, 12, 16],\n  102: int,\n  103: dict,\n  104: 7,\n  105: 2,\n  106: 4,\n  107: 20,\n  108: 6,\n  109: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9],\n  110: [('a', 'd'), ('b', 'e'), ('c', 'f')],\n  112: {'Tom': 'E', 'John': 'F'},\n  113: True,\n  114: False,\n  115: 'positive',\n  117: 2.0,\n  118: 1,\n  120: -1,\n  121: -1,\n  123: [0, 1, 2, 3, 5, 8, 13, 21, 34, 55],\n  125: [1, 4, 9, 16, 25],\n  126: [1, 4, 9, 16, 25],\n  128: [2, 4],\n  129: [1, 4, 9, 16, 25],\n  130: [1, 4, 9, 16, 25],\n  134: 24,\n  138: &lt;os._wrap_close at 0x26d911af550&gt;,\n  140: 'D:\\\\OneDrive\\\\01-ds-book\\\\02-python-book'},\n 'get_ipython': &lt;bound method InteractiveShell.get_ipython of &lt;ipykernel.zmqshell.ZMQInteractiveShell object at 0x0000026D90D3E4A0&gt;&gt;,\n 'exit': &lt;IPython.core.autocall.ZMQExitAutocall at 0x26d90d3da80&gt;,\n 'quit': &lt;IPython.core.autocall.ZMQExitAutocall at 0x26d90d3da80&gt;,\n 'open': &lt;function io.open(file, mode='r', buffering=-1, encoding=None, errors=None, newline=None, closefd=True, opener=None)&gt;,\n 'ojs_define': &lt;function __main__.ojs_define(**kwargs)&gt;,\n '_i': 'os.getcwd()',\n '_ii': '# Kiểm tra thư mục làm việc\\nimport os as os',\n '_iii': \"import os\\ncmd = 'dir'\\nos.popen(cmd)\",\n '_i1': 'x = 20\\nx',\n 'x': 'abc',\n '_': 'D:\\\\OneDrive\\\\01-ds-book\\\\02-python-book',\n '__': &lt;os._wrap_close at 0x26d911af550&gt;,\n '___': 24,\n '_1': 20,\n '_i2': 'x = True\\nx',\n '_2': True,\n '_i3': 'x = 100 &lt; 2\\nx',\n '_3': False,\n '_i4': 'type(x)',\n '_4': bool,\n '_i5': 'True + False',\n '_5': 1,\n '_i6': 'y = [False, False, True, True] # List boolean value\\nsum(y)',\n 'y': 'def',\n '_6': 2,\n '_i7': 'a, b = 1, 2\\nc, d = 2.5, 10.0\\ntype(a)',\n 'a': 11,\n 'b': 'single quotes',\n 'c': \"i'm a man\",\n 'd': {'one': 'một', 'two': 'hai', 'three': 'ba'},\n '_7': int,\n '_i8': 'type(d)',\n '_8': float,\n '_i9': 'x = 2\\nx * 2',\n '_9': 4,\n '_i10': 'x',\n '_10': 2,\n '_i11': '# Gtri chỉ thay đổi khi gán vào 1 biến mới\\nx = x * 2\\nx',\n '_11': 4,\n '_i12': '# Có thể nhập bằng single quote hoặc double quote\\na = \\'single quotes\\'\\nb = \"single quotes\"\\na == b',\n '_12': True,\n '_i13': '#hoặc cả 2\\nc = \"i\\'m a man\"\\nc',\n '_13': \"i'm a man\",\n '_i14': 'word = \"hello\"\\nword[0]',\n 'word': 'hello',\n '_14': 'h',\n '_i15': 'word = \"hello\"\\n# Chiều từ trái qua phải\\nword[2]',\n '_15': 'l',\n '_i16': '# Chiều từ phải qua trái, sd khi ko biết chính xác độ dài chuỗi\\nword[-1]',\n '_16': 'o',\n '_i17': 'word[1:3]',\n '_17': 'el',\n '_i18': 'word[2:]',\n '_18': 'llo',\n '_i19': '# Lấy cả chuỗi, cách 2 đơn vị\\nword[::2]',\n '_19': 'hlo',\n '_i20': \"dept = 'Phòng Phân tích kinh doanh'\",\n 'dept': 'dbs_aad',\n '_i21': '# trả về dạng chữ thường\\ndept.lower()',\n '_21': 'phòng phân tích kinh doanh',\n '_i22': '# trả về dạng chữ hoa\\ndept.upper()',\n '_22': 'PHÒNG PHÂN TÍCH KINH DOANH',\n '_i23': '# Trả về một list các phần tử được tách bởi một dấu phân cách(delimiter) cho trước\\ndept.split()',\n '_23': ['Phòng', 'Phân', 'tích', 'kinh', 'doanh'],\n '_i24': \"# Trả về một chuỗi được ghép bởi các phần tử từ một list, theo một dấu phân cách cho trước\\n'xx'.join(['a', 'b', 'c'])\",\n '_24': 'axxbxxc',\n '_i25': \"#tìm kiếm ký tự - trả về vị trí của ký tự đầu tiên tìm được trong chuỗi\\n# trả ra -1 nếu k tìm thấy\\ndept.find('phòng')\",\n '_25': -1,\n '_i26': \"# Check xem chuỗi có bắt đầu bằng ký tự cho trước không\\ndept.startswith('w')\",\n '_26': False,\n '_i27': \"# tương tự là endwith\\ndept.endswith('doanh')\",\n '_27': True,\n '_i28': \"x = [10, 'foo', False, 2.5] #các phần tử có kiểu dữ liệu không đồng nhất\\ntype(x)\",\n '_28': list,\n '_i29': \"color = list(['xanh', 'đỏ', 'vàng'])\\ncolor\",\n 'color': ['xanh', 'đỏ', 'vàng'],\n '_29': ['xanh', 'đỏ', 'vàng'],\n '_i30': 'x[1]',\n '_30': 'foo',\n '_i31': 'x[-2]',\n '_31': False,\n '_i32': 'x[1:3]',\n '_32': ['foo', False],\n '_i33': 'numbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]',\n 'numbers': [0, 1, 2, 4, 5, 6, 7, 8, 9, 15, 'a', 'b', 'c'],\n '_i34': 'numbers[1:9:3] # cắt từ 1 đến trước 9, khoảng khách là 3',\n '_34': [1, 4, 7],\n '_i35': 'numbers[::2] # lấy từ đầu đến cuối, khoảng cách là 2',\n '_35': [0, 2, 4, 6, 8],\n '_i36': 'numbers[:2] # lấy 2 giá trị đầu',\n '_36': [0, 1],\n '_i37': 'numbers[-3:] # lấy 3 giá trị cuối',\n '_37': [7, 8, 9],\n '_i38': 'numbers[::-1] # đảo ngược giá trị của list',\n '_38': [9, 8, 7, 6, 5, 4, 3, 2, 1, 0],\n '_i39': \"skill_sets = ['sql', 'r', 'excel', 'python']\",\n 'skill_sets': ['sql', 'vba', 'spss'],\n '_i40': \"# Thay đổi từ chỉ mục 2 đến hết\\nskill_sets[2:] = ['spss']\\nskill_sets\",\n '_40': ['sql', 'vba', 'spss'],\n '_i41': \"# chỉ mục 1 thay bằng 'vba'\\nskill_sets[1] = 'vba'\\nskill_sets\",\n '_41': ['sql', 'vba', 'spss'],\n '_i42': 'numbers.append(15)\\nnumbers',\n '_42': [0, 1, 2, 4, 5, 6, 7, 8, 9, 15, 'a', 'b', 'c'],\n '_i43': 'numbers.pop(3) #xóa phần từ thứ 3\\nnumbers',\n '_43': [0, 1, 2, 4, 5, 6, 7, 8, 9, 15, 'a', 'b', 'c'],\n '_i44': \"numbers.extend(['a', 'b', 'c'])\\nnumbers\",\n '_44': [0, 1, 2, 4, 5, 6, 7, 8, 9, 15, 'a', 'b', 'c'],\n '_i45': 'numbers2 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\\nnumbers2.sort(reverse=True)\\nnumbers2',\n 'numbers2': [9, 8, 7, 6, 5, 4, 3, 2, 1, 0],\n '_45': [9, 8, 7, 6, 5, 4, 3, 2, 1, 0],\n '_i46': 'tuple1 = (\"Hanoi\", \"Hai Phong\", \"Tay Ninh\", \"Lam Dong\")\\ntype(tuple1)',\n 'tuple1': ('a', 'b', 'c'),\n '_46': tuple,\n '_i47': 'tuple2 = \"Hanoi\", \"Hai Phong\", \"Tay Ninh\", \"Lam Dong\"\\ntype(tuple2)',\n 'tuple2': ('Hanoi', 'Hai Phong', 'Tay Ninh', 'Lam Dong'),\n '_47': tuple,\n '_i48': '# Khời tạo tuple rỗng\\ntpl = ()\\n#hoặc\\ntpl2 = tuple()\\nprint(type(tpl), type(tpl2))',\n 'tpl': (),\n 'tpl2': (),\n '_i49': \"list1 = [1, 2, 3]\\ntuple1 = ('a', 'b', 'c')\",\n 'list1': [1, 2, 'a'],\n '_i50': 'list1[2] = \"a\"\\nlist1',\n '_50': [1, 2, 'a'],\n '_i51': 'tuple1[1] = 1\\ntuple1',\n '_i52': 'x, y, z = tuple1\\ny',\n 'z': &lt;zip at 0x26d95cd62c0&gt;,\n '_52': 'b',\n '_i53': \"d = {\\n    'one':'một',\\n    'two':'hai',\\n    'three':'ba'}\\ntype(d)\",\n '_53': dict,\n '_i54': \"d2 = {\\n    'one': 0.5,\\n    'two': [1, 2, 3],\\n    'three': False}\\ntype(d2)\",\n 'd2': {'one': 0.5, 'three': 3, 'four': 4},\n '_54': dict,\n '_i55': \"d2['two']\",\n '_55': [1, 2, 3],\n '_i56': \"d2['three'] = 3\\nd2\",\n '_56': {'one': 0.5, 'three': 3, 'four': 4},\n '_i57': \"d2['four'] = 4\\nd2\",\n '_57': {'one': 0.5, 'three': 3, 'four': 4},\n '_i58': \"del d2['two']\\nd2\",\n '_58': {'one': 0.5, 'three': 3, 'four': 4},\n '_i59': 'd.items()',\n '_59': dict_items([('one', 'một'), ('two', 'hai'), ('three', 'ba')]),\n '_i60': 'd.values()',\n '_60': dict_values(['một', 'hai', 'ba']),\n '_i61': \"s1 = {'a', 'b', 3}\\ntype(s1)\",\n 's1': {3, 'a', 'b'},\n '_61': set,\n '_i62': 's2 = {1, 1, 2, 2, 2, 3, 3, 3}\\ns2',\n 's2': {1, 2, 3},\n '_62': {1, 2, 3},\n '_i63': 'mix_set = { \"dbs_aad\", 34, (4, 5, 6) }',\n 'mix_set': {(4, 5, 6), 34, 'dbs_aad'},\n '_i64': 'mix_mutable_set = { \"Hải Phòng\", \"Hà Nội\", [ 2, 4 ] }',\n '_i65': \"s1.add('4')\\ns1\",\n '_65': {3, 'a', 'b'},\n '_i66': \"s1.remove('4')\\ns1\",\n '_66': {3, 'a', 'b'},\n '_i67': '# Kiểm tra s1 có phải tập con của s2 ko \\ns1.issubset(s2)',\n '_67': False,\n '_i68': '# Kiểm tra tập giao giữa 2 tập con\\ns1.intersection(s2)',\n '_68': {3},\n '_i69': 'x, y = 1, 2\\nx &lt; y',\n '_69': True,\n '_i70': 'x &gt; y',\n '_70': False,\n '_i71': '1 &lt; 2 &lt; 3',\n '_71': True,\n '_i72': '# hoặc \\n1 &lt;= 2 &lt;= 3',\n '_72': True,\n '_i73': 'x = 1  #assignment\\nx == 2 #comparison',\n '_73': False,\n '_i74': 'x != 2',\n '_74': True,\n '_i75': 'ta = \"Nguyen Tuan Anh\"\\nha = ta\\nta is ha',\n 'ta': 'Nguyen Tuan Anh',\n 'ha': 'Nguyen Tuan Anh',\n '_75': True,\n '_i76': 'ta is not ha',\n '_76': False,\n '_i77': 'x = [1, 2, 3]\\ny = [1, 2, 3]\\nx == y # toán tử == kiểm tra tính ngang bằng - equality',\n '_77': True,\n '_i78': 'x is y # toán tử is kiểm tra tính đồng nhất - identical',\n '_78': False,\n '_i79': 'z = x\\nz is x',\n '_79': True,\n '_i80': 'True and False',\n '_80': False,\n '_i81': 'not False and True',\n '_81': True,\n '_i82': '1 &gt; 2 and 3 == 3',\n '_82': False,\n '_i83': \"'x' in 'hanoi'\",\n '_83': False,\n '_i84': \"'x' not in 'hanoi'\",\n '_84': True,\n '_i85': \"if 1 &lt; 2:\\n    print('Yep!')\",\n '_i86': \"if 1 &gt; 2:\\n    print('first')\\nelse:\\n    print('last')\",\n '_i87': \"if 1 == 2:\\n    print('first')\\nelif 3 == 3:\\n    print('middle')\\nelse:\\n    print('Last')\",\n '_i88': \"if 1 &lt; 2:\\nprint('x')\",\n '_i89': 'a = 1\\nwhile a &lt; 10:\\n    print(a)\\n    a += 2 # += tương đương với a = a + 2',\n '_i90': \"a = 0\\nwhile a &lt; 20:\\n    if a % 5 == 0:\\n        print('{x} chia hết cho 5'.format(x=a))\\n    a += 1\",\n '_i91': 'a = list(range(1, 10))\\ni = 1\\nwhile i &lt; max(a):\\n    print(i)\\n    if i % 5 == 0:\\n        break\\n    i += 1',\n 'i': 9,\n '_i92': \"a = 1\\nwhile a &lt; 10:\\n    print(a)\\n    a += 2\\nelse:\\n    print ('End while')\",\n '_i93': 'animals = [\\'dog\\', \\'cat\\', \\'bird\\']\\nfor animal in animals:\\n    print(\"The plural of \" + animal + \" is \" + animal + \"s\")',\n 'animals': ['dog', 'cat', 'bird'],\n 'animal': 'bird',\n '_i94': \"animals = ['dog', 'cat', 'bird']\\nfor animal in animals:\\n    print('The plural of ' + animal + ' is ' + animal + 's')\\nelse:\\n    print('End for loop')\",\n '_i95': 'x = list(range(10))\\nx',\n '_95': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9],\n '_i96': 'y = []\\nfor i in x:    \\n    y.append(i * 2)\\ny    ',\n '_96': [0, 2, 4, 6, 8, 10, 12, 14, 16, 18],\n '_i97': 'y = [i * 2 for i in x]\\ny',\n '_97': [0, 2, 4, 6, 8, 10, 12, 14, 16, 18],\n '_i98': 'y = [i * 2 for i in x if i % 2 == 0]\\ny',\n '_98': [0, 4, 8, 12, 16],\n '_i99': 'print (\"Tôi muốn học Python trong 2 tuần\")',\n '_i100': \"# Cách 1 \\nprint ('Tên tôi là %s và tôi %d tuổi' % ('Hoàng', 29)) # %s là để nhập string, #d để nhập decimal\",\n '_i101': \"# Cách 2\\nprint ('Tên tôi là {x} và tôi {y} tuổi'.format(x = 'Hoàng', y = 29))\",\n '_i102': 'x = 3\\ntype(x)',\n '_102': int,\n '_i103': 'person = {\"name\": \"Nguyen Tuan Anh\", \"title\": \"Xam King\"}\\ntype(person)',\n 'person': {'name': 'Nguyen Tuan Anh', 'title': 'Xam King'},\n '_103': dict,\n '_i104': '# Trả về chiều dài của chuỗi\\ndept = \"dbs_aad\"\\nlen(dept)',\n '_104': 7,\n '_i105': '# Trả về số phần tử trong một List\\nlanguages = [\"Vietnamese\", \"English\"]\\nlen(languages)',\n 'languages': ['Vietnamese', 'English'],\n '_105': 2,\n '_i106': '# Trả về giá trị lớn nhất của một dãy số\\nmax(1,2,4)',\n '_106': 4,\n '_i107': '# Trả về giá trị của phần tử lớn nhất trong một List\\nmax([1, 20, 18])',\n '_107': 20,\n '_i108': 'sum([1, 2, 3])',\n '_108': 6,\n '_i109': 'list(range(0, 10))',\n '_109': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9],\n '_i110': \"x = 'abc'\\ny = 'def'\\nz = zip(x,y)\\nlist(z)\",\n '_110': [('a', 'd'), ('b', 'e'), ('c', 'f')],\n '_i111': \"countries = ('Japan', 'Korea', 'China')\\ncities = ('Tokyo', 'Seoul', 'Beijing')\\nfor country, city in zip(countries, cities):\\n    print(f'The capital of {country} is {city}')\",\n 'countries': ('Japan', 'Korea', 'China'),\n 'cities': ('Tokyo', 'Seoul', 'Beijing'),\n 'country': 'China',\n 'city': 'Beijing',\n '_i112': \"names = ['Tom', 'John']\\nmarks = ['E', 'F']\\ndict(zip(names, marks))\",\n 'names': ['Tom', 'John'],\n 'marks': ['E', 'F'],\n '_112': {'Tom': 'E', 'John': 'F'},\n '_i113': 'list2 = [False, False, True]\\nany(list2)',\n 'list2': [False, False, True],\n '_113': True,\n '_i114': 'all(list2)',\n '_114': False,\n '_i115': \"def check_num(x):\\n    if x &lt; 0:\\n        return 'negative'\\n    return 'positive'\\n\\ncheck_num(2)\",\n 'check_num': &lt;function __main__.check_num(x)&gt;,\n '_115': 'positive',\n '_i116': 'def plus(x, y):\\n    a = x + y    \\nplus(3, 4)  # không có gì ',\n 'plus': &lt;function __main__.plus(x, y)&gt;,\n '_i117': 'def divide(x, y):\\n    print (\"Dividing...\")\\n    return x/y\\n    print (\"Done\")\\n\\ndivide(6, 3)',\n 'divide': &lt;function __main__.divide(x, y)&gt;,\n '_117': 2.0,\n '_i118': 'def square(x):\\n    \"\"\"\\n    Tính bình phương của 1 giá trị\\n    \"\"\"\\n    y = x**2\\n    return y\\n\\nsquare(-1)',\n 'square': &lt;function __main__.square(x)&gt;,\n '_118': 1,\n '_i119': '# function 1 \\ndef minus(x, y):\\n    a = x - y\\n    return a\\n# func2\\nminus2 = lambda x, y: x-y # Dấu : tương đương với return',\n 'minus': &lt;function __main__.minus(x, y)&gt;,\n 'minus2': &lt;function __main__.&lt;lambda&gt;(x, y)&gt;,\n '_i120': 'minus(3, 4)',\n '_120': -1,\n '_i121': 'minus2(3, 4)',\n '_121': -1,\n '_i122': '# Hàm xây dựng chuỗi n Fibonacci\\ndef fib_n(n):\\n    if n == 1:\\n        my_list = list([0])\\n    elif n == 2:\\n        my_list = list([0, 1])\\n    else: \\n        my_list = list([0])\\n        f0 = 0\\n        f1 = 1\\n        my_range = range(n-1)\\n        for i in my_range:\\n            f2 = f1 + f0\\n            f0 = f1\\n            f1 = f2\\n            my_list.append(f2)\\n    return(my_list)',\n 'fib_n': &lt;function __main__.fib_n(n)&gt;,\n '_i123': 'fib_n(10)',\n '_123': [0, 1, 2, 3, 5, 8, 13, 21, 34, 55],\n '_i124': 'seq = [1, 2, 3, 4, 5]\\n# sử dụng hàm square được định nghĩa ở trên \\nsquare(seq)',\n 'seq': [1, 2, 3, 4, 5],\n '_i125': 'seq2 = map(square, seq)\\nlist(seq2) # hàm map sẽ trả ra map object, để trả kết quả ra list ta dùng hàm list',\n 'seq2': &lt;map at 0x26d95b7e530&gt;,\n '_125': [1, 4, 9, 16, 25],\n '_i126': 'seq3 = map(lambda x: x*x, seq)\\nlist(seq3)',\n 'seq3': &lt;map at 0x26d911af6a0&gt;,\n '_126': [1, 4, 9, 16, 25],\n '_i127': 'def check_even(x):\\n    if x % 2 == 0:\\n        return True\\n    else:\\n        return False',\n 'check_even': &lt;function __main__.check_even(x)&gt;,\n '_i128': 'list(filter(check_even, seq))',\n '_128': [2, 4],\n '_i129': 'seq4 = [x * x for x in seq]\\nseq4',\n 'seq4': [1, 4, 9, 16, 25],\n '_129': [1, 4, 9, 16, 25],\n '_i130': '# sử dụng map\\nseq3 = map(lambda x: x*x, seq)\\nlist(seq3)',\n '_130': [1, 4, 9, 16, 25],\n '_i131': '%timeit L = map(square, seq)',\n '_i132': '%timeit L = [x * x for x in seq]',\n '_i133': \"my_file = open('output.txt', 'w') # w is write\",\n 'my_file': &lt;_io.TextIOWrapper name='output.txt' mode='w' encoding='cp1252'&gt;,\n '_i134': \"lines = 'This is my first example'\\nmy_file.write(lines)\",\n 'lines': 'This is my first example',\n '_134': 24,\n '_i135': 'import pickle',\n 'pickle': &lt;module 'pickle' from 'C:\\\\Users\\\\Hoang Duc Anh\\\\anaconda3\\\\lib\\\\pickle.py'&gt;,\n '_i136': 't = [1,2,3]\\ns = pickle.dumps(t) # dumps: dump string',\n 't': [1, 2, 3],\n 's': b'\\x80\\x04\\x95\\x0b\\x00\\x00\\x00\\x00\\x00\\x00\\x00]\\x94(K\\x01K\\x02K\\x03e.',\n '_i137': 'my_load = pickle.loads(s) #loads: loads string',\n 'my_load': [1, 2, 3],\n '_i138': \"import os\\ncmd = 'dir'\\nos.popen(cmd)\",\n 'os': &lt;module 'os' from 'C:\\\\Users\\\\Hoang Duc Anh\\\\anaconda3\\\\lib\\\\os.py'&gt;,\n 'cmd': 'dir',\n '_138': &lt;os._wrap_close at 0x26d911af550&gt;,\n '_i139': '# Kiểm tra thư mục làm việc\\nimport os as os',\n '_i140': 'os.getcwd()',\n '_140': 'D:\\\\OneDrive\\\\01-ds-book\\\\02-python-book',\n '_i141': '# Kiểm tra các biến trong môi trường làm việc\\nglobals()'}\n\n\n\n#Set working directory\nimport os as os\nos.chdir(\"D:\")\n\n\n#List file trong directory\nos.listdir()\n\n['.git',\n '.gitignore',\n '.quarto',\n '.Rhistory',\n '.Rproj.user',\n '02-python-book.Rproj',\n '99_dataset',\n 'debug.log',\n 'final_model.sav',\n 'flask-api.py',\n 'fonts',\n 'Image',\n 'index.html',\n 'index.qmd',\n 'iris-api-prediction',\n 'model.sav',\n 'my_df.pkl',\n 'my_figure.png',\n 'my_functions.py',\n 'output.txt',\n 'p01-01-intro-jupyter-notebook.html',\n 'p01-01-intro-jupyter-notebook.qmd',\n 'p01-01-intro-jupyter-notebook_files',\n 'p01-02-gioi-thieu-co-ban-python.ipynb',\n 'p01-02-gioi-thieu-co-ban-python.qmd',\n 'p01-03-numpy.qmd',\n 'p01-05-pandas.qmd',\n 'p01-06-datetime.qmd',\n 'p01-07-lam-viec-voi-text.qmd',\n 'p01-08-matplotlib.qmd',\n 'p01-09-seaborn.qmd',\n 'p01-13-lam-viec-voi-files.qmd',\n 'p01-19-so-sanh-python-r.qmd',\n 'p01-99-tricks-python.qmd',\n 'p02-01-sklearn.qmd',\n 'p02-02-sklearn-advanced.qmd',\n 'p02-03-xgboost.qmd',\n 'p02-07-machine-learning-h2o.qmd',\n 'p02-20-api-flask.qmd',\n 'p05-01-django.qmd',\n 'p06-01-lap-trinh-doi-tuong-python.qmd',\n 'p07-01-functions-in-python.qmd',\n 'p08-01-django.qmd',\n 'seaborn_chart.png',\n 'site_libs',\n '_book',\n '_quarto.yml']"
  },
  {
    "objectID": "p01-03-numpy.html#cơ-bản-về-numpy",
    "href": "p01-03-numpy.html#cơ-bản-về-numpy",
    "title": "3  Giới thiệu về Numpy",
    "section": "3.1 Cơ bản về numpy",
    "text": "3.1 Cơ bản về numpy\nNumpy là viết tắt của Numerical Python, là một thư viện hỗ trợ tính toán trong Python\n\nL1 = list(range(0, 10))\n\n\nL1\n\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n\n\ntype(L1)\n\nlist\n\n\n\ntype(L1[0])\n\nint\n\n\nChuyển từ list của Python object thành array\n\nimport numpy as np\nL2 = np.array(range(0, 10))\nL2\n\narray([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n\n\n\ntype(L2)\n\nnumpy.ndarray\n\n\nLưu ý: Khi làm việc với các dữ liệu dạng vector như R, ta cần chuyển định dạng list thành dạng np.array"
  },
  {
    "objectID": "p01-03-numpy.html#tạo-array-cơ-bản",
    "href": "p01-03-numpy.html#tạo-array-cơ-bản",
    "title": "3  Giới thiệu về Numpy",
    "section": "3.2 Tạo array cơ bản",
    "text": "3.2 Tạo array cơ bản\n\n# Tạo array zero\nnp.zeros(10, dtype = int)\n\narray([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n\n\n\n# Tạo array 1\nnp.ones((2,3), dtype = float)\n\narray([[1., 1., 1.],\n       [1., 1., 1.]])\n\n\nLưu ý: dtype là viết tắt của data type object - quy định kiểu cấu trúc dữ liệu trong array\n\n# Tạo array 2x3 có giá trị 3.14\n\n\nnp.full((2,3), 3.14)\n\narray([[3.14, 3.14, 3.14],\n       [3.14, 3.14, 3.14]])\n\n\n\n# Chuỗi từ 2:20\nnp.arange(2,20, 2)\n\narray([ 2,  4,  6,  8, 10, 12, 14, 16, 18])\n\n\n\n# Array 3x3 giá trị random trong khoảng 0,1 (uniform distribution)\n\n\nnp.random.random((3,3))\n\narray([[0.77455059, 0.56522094, 0.82079799],\n       [0.63557039, 0.22942588, 0.83746923],\n       [0.95790326, 0.50298926, 0.45289396]])\n\n\n\n# Random theo phân phối chuẩn\n\n\nnp.random.normal(0,1, (3,3))\n\narray([[-0.96216115,  0.12775969, -0.58731521],\n       [ 2.46247593,  1.3022359 ,  0.28092891],\n       [ 0.09620113,  0.96912231,  0.07167211]])\n\n\n\n# Random integer\nnp.random.randint(1, 10, (3,3))\n\narray([[5, 7, 9],\n       [3, 8, 2],\n       [5, 8, 4]])\n\n\n\n# Chia vector từ 0-5 thành 50 phần bằng nhau\nnp.linspace(0,5,50)\n\narray([0.        , 0.10204082, 0.20408163, 0.30612245, 0.40816327,\n       0.51020408, 0.6122449 , 0.71428571, 0.81632653, 0.91836735,\n       1.02040816, 1.12244898, 1.2244898 , 1.32653061, 1.42857143,\n       1.53061224, 1.63265306, 1.73469388, 1.83673469, 1.93877551,\n       2.04081633, 2.14285714, 2.24489796, 2.34693878, 2.44897959,\n       2.55102041, 2.65306122, 2.75510204, 2.85714286, 2.95918367,\n       3.06122449, 3.16326531, 3.26530612, 3.36734694, 3.46938776,\n       3.57142857, 3.67346939, 3.7755102 , 3.87755102, 3.97959184,\n       4.08163265, 4.18367347, 4.28571429, 4.3877551 , 4.48979592,\n       4.59183673, 4.69387755, 4.79591837, 4.89795918, 5.        ])"
  },
  {
    "objectID": "p01-03-numpy.html#các-thuộc-tính-của-array",
    "href": "p01-03-numpy.html#các-thuộc-tính-của-array",
    "title": "3  Giới thiệu về Numpy",
    "section": "3.3 Các thuộc tính của array",
    "text": "3.3 Các thuộc tính của array\nArray có 3 thuộc tính sau: - ndim: Số lượng chiều trong mảng - shape: Chi tiết chiều trong mảng - size: Số lượng phần tử trong mảng\n\nimport numpy as np\nL1 = np.random.randint(10, size = (6))\nL2 = np.random.normal(0, 1, size = (2,3))\nL3 = np.random.normal(0, 1, size = (2,3,4))\nL1\nL2\nL3\n\narray([[[-0.01672586, -2.17379436,  0.99532768, -0.60629658],\n        [-1.08298914,  0.98459414, -0.03174186,  0.20304385],\n        [-0.57879599, -1.08924701, -0.99396822,  1.25397104]],\n\n       [[-0.04581503, -0.03822338, -0.7550348 ,  0.56334582],\n        [-0.31932517, -0.41972707, -0.73876216,  1.62782588],\n        [-0.39287762,  0.0547495 , -0.40876901,  0.16650923]]])\n\n\n\nL1\n\narray([5, 2, 5, 0, 9, 7])\n\n\n\nL1.ndim\n\n1\n\n\n\nL2.shape\n\n(2, 3)\n\n\n\nL3.size\n\n24\n\n\nLưu ý: Trong Python, khi các thuộc tính của object, ta sử dụng không có dấu (), với hàm, ta sử dụng dấu ()"
  },
  {
    "objectID": "p01-03-numpy.html#trích-xuất-dữ-liệu-trong-array",
    "href": "p01-03-numpy.html#trích-xuất-dữ-liệu-trong-array",
    "title": "3  Giới thiệu về Numpy",
    "section": "3.4 Trích xuất dữ liệu trong array",
    "text": "3.4 Trích xuất dữ liệu trong array\nTrong array của numpy, ta chiết xuất dữ liệu tương tự như R. Tuy nhiên, do Python đánh số index từ 0 nên cần lưu ý.\n\nmy_array = np.random.randint(10, size = (3,3))\n\n\nmy_array\n\narray([[7, 1, 7],\n       [7, 1, 3],\n       [5, 3, 5]])\n\n\n\nmy_array[0, 1]\n\n1\n\n\n\nmy_array[1, 0]\n\n7\n\n\n\nmy_array[2,1]\n\n3\n\n\n\n3.4.1 Chiết xuất array theo chuỗi\n\nx = np.arange(1, 10)\n\n\nx\n\narray([1, 2, 3, 4, 5, 6, 7, 8, 9])\n\n\nLưu ý: Khi sử dụng arange trong numpy, chuỗi sẽ được thể hiện dạng [a, b)\n\nx[:5] #5 thành phần đầu tiên\n\narray([1, 2, 3, 4, 5])\n\n\n\nx[2:5] # Vị trí 3,4,5\n\narray([3, 4, 5])\n\n\n\nx[5:] # Tất cả các thành phần sau vị trí 5\n\narray([6, 7, 8, 9])\n\n\n\nx[::2] # Các thành phần ở vị trị lẻ\n\narray([1, 3, 5, 7, 9])\n\n\n\nx[::3] # Các thành phần cách nhau 3 chỉ số\n\narray([1, 4, 7])\n\n\n\nx[1::2] # Các thành phần ở vị trí lẻ, bắt đầu từ số 2\n\narray([2, 4, 6, 8])"
  },
  {
    "objectID": "p01-03-numpy.html#thay-đổi-chiều-trong-array",
    "href": "p01-03-numpy.html#thay-đổi-chiều-trong-array",
    "title": "3  Giới thiệu về Numpy",
    "section": "3.5 Thay đổi chiều trong array",
    "text": "3.5 Thay đổi chiều trong array\nSử dụng phương pháp reshape()\n\nx = np.arange(1, 10)\n\n\ntype(np.array([1, 10]))\n\nnumpy.ndarray\n\n\n\nx\n\narray([1, 2, 3, 4, 5, 6, 7, 8, 9])\n\n\n\nx.reshape(3,3)\n\narray([[1, 2, 3],\n       [4, 5, 6],\n       [7, 8, 9]])"
  },
  {
    "objectID": "p01-03-numpy.html#fancy-index",
    "href": "p01-03-numpy.html#fancy-index",
    "title": "3  Giới thiệu về Numpy",
    "section": "3.6 Fancy index",
    "text": "3.6 Fancy index\nÝ tưởng của fancy index là sử dụng các vị trí trong array cũ để tạo array mới, trong khi đó, chiều của array mới được tạo thành từ fancy index\n\nx = np.arange(1, 10)\nx\n\narray([1, 2, 3, 4, 5, 6, 7, 8, 9])\n\n\n\nfancy_index = np.array([[0,2], [7,4]])\nfancy_index\n\narray([[0, 2],\n       [7, 4]])\n\n\n\nx[fancy_index]\n\narray([[1, 3],\n       [8, 5]])"
  },
  {
    "objectID": "p01-03-numpy.html#các-phép-toán-trong-array",
    "href": "p01-03-numpy.html#các-phép-toán-trong-array",
    "title": "3  Giới thiệu về Numpy",
    "section": "3.7 Các phép toán trong array",
    "text": "3.7 Các phép toán trong array\n\n# Sort\nx = np.array([1,3,2,9,6])\n\n\nnp.sort(x)\n\narray([1, 2, 3, 6, 9])\n\n\n\n# Sort với mảng hai chiều\ny = np.random.randint(1,10, size = (3,3))\n\n\ny\n\narray([[1, 2, 8],\n       [2, 6, 6],\n       [6, 7, 8]])\n\n\n\nnp.sort(y, axis = 0) # Sort theo cột\n\narray([[1, 2, 6],\n       [2, 6, 8],\n       [6, 7, 8]])\n\n\n\nnp.sort(y, axis = 1) # Sort theo dòng\n\narray([[1, 2, 8],\n       [2, 6, 6],\n       [6, 7, 8]])\n\n\nCác phép toán trong array của Python tương tự như R"
  },
  {
    "objectID": "p01-03-numpy.html#biến-đổi-từ-dataframe-sang-array",
    "href": "p01-03-numpy.html#biến-đổi-từ-dataframe-sang-array",
    "title": "3  Giới thiệu về Numpy",
    "section": "3.8 Biến đổi từ dataframe sang array",
    "text": "3.8 Biến đổi từ dataframe sang array\nCác phép toán ứng dụng của machine learning chủ yếu làm việc với array. Trong khi đó, cấu trúc dữ liệu cơ bản khi làm việc về phân tích và khám phá dữ liệu lại là pd.DataFrame và pd.Series. Do đó, cần phải thành thạo việc biến đổi qua lại các kiểu dữ liệu trên\n\n3.8.1 List sang array\n\nmy_list = [1,2,3,4]\n\n\ntype(my_list)\n\nlist\n\n\n\n# Biến đổi sang array\nnp.array(my_list)\n\narray([1, 2, 3, 4])\n\n\n\n\n3.8.2 Series & DataFrame sang array\n\nimport pandas as pd\nmy_df = pd.DataFrame({\n    'x' : [1,2,3],\n    'y' : ['a', 'b', 'c']\n})\nmy_df\n\n\n\n\n\n\n\n\nx\ny\n\n\n\n\n0\n1\na\n\n\n1\n2\nb\n\n\n2\n3\nc\n\n\n\n\n\n\n\n\n# DF sang array\nmy_df.values\n\narray([[1, 'a'],\n       [2, 'b'],\n       [3, 'c']], dtype=object)\n\n\n\ntype(my_df.values)\n\nnumpy.ndarray\n\n\n\nnew_array = my_df.values\nnew_array.shape\n\n(3, 2)\n\n\n\n# Series sang array\nseries_array =  my_df['x'].values\n\n\nseries_array.shape\n\n(3,)\n\n\nLưu ý: Khi chuyển từ dạng Series sang array sẽ tạo thành 1 array 1 chiều. Do đó, khi làm việc với các thuật toán trong sklearn cần biến đổi shape để trở thành array dạng (n, 1)\n\nseries_array.reshape(3, 1).shape\n\n(3, 1)"
  },
  {
    "objectID": "p01-05-pandas.html#cơ-bản-về-pandas",
    "href": "p01-05-pandas.html#cơ-bản-về-pandas",
    "title": "4  Pandas",
    "section": "4.1 Cơ bản về pandas",
    "text": "4.1 Cơ bản về pandas\nPandas là viết tắt của panel data, pandas dataframe có thể coi như dataframe trong R\n\n# %matplotlib inline\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Option hiển thị tối đa 8 dòng\npd.options.display.max_rows = 8\n\n\n# Kiểm tra version pandas\npd.__version__\n\ndataframe có thể được tạo ra từ các Series. Series có thể coi tương tự như vector trong R\n\n# Tạo các data cần thiết\n# series\npopulation = pd.Series({'Germany': 81.3, 'Belgium': 11.3, 'France': 64.3, \n                        'United Kingdom': 64.9, 'Netherlands': 16.9})\npopulation\n\n\n# dataframe\ndata = {'country': ['Belgium', 'France', 'Germany', 'Netherlands', 'United Kingdom'],\n        'population': [11.3, 64.3, 81.3, 16.9, 64.9],\n        'area': [30510, 671308, 357050, 41526, 244820],\n        'capital': ['Brussels', 'Paris', 'Berlin', 'Amsterdam', 'London']}\ncountries = pd.DataFrame(data)\ncountries\n\n\n4.1.1 Các cấu trúc dữ liệu cơ bản\n\nList\n\n\nx = ['One', \"Two\"]\nx\n\n\ntype(x)\n\n\nDictionary: Có thêm index và không nhất thiết phải độ dài bằng nhau\n\n\ndf = {'state': ['Ohio', 'Ohio', 'Nevada'],\n     'year': [2000, 2001, 2002, 2003]}\ndf\n\n\n4.1.1.1 Series\nSeries là mảng một chiều, Series có thể chứa index và values. Series có thể coi như là mảng một chiều mở rộng của numpy array\n\nimport pandas as pd\nobj = pd.Series([4,5,-7, 6])\nobj\n\n\nobj.values\n\n\nobj.index\n\n\n# Lấy thành phần từ 1 đến 2\nobj[1:3]\n\n\n# Đổi lại index\nobj.index = ['a','b','c','d']\nobj.index\n\n\nobj['a']\n\n\nobj[obj &gt; 0]\n\n\nobj*2\n\n\npd.isnull(obj)\n\n\nobj['a']\n\n\npd.notnull(obj)\n\nBiến category: Trong pandas cho phép sử dụng biến category tương tự như factor của R\n\ns = pd.Series([\"a\",\"b\",\"c\",\"a\"], dtype=\"category\")\ns.describe()\n\n\n\n4.1.1.2 DataFrame\nDataFrame có cấu trúc tương tự như R dataframe\n\n# Tạo dictionary trong Python\ndata = {'state': ['Ohio', 'Ohio', 'Ohio', 'Nevada', 'Nevada'],\n'year': [2000, 2001, 2002, 2001, 2002],\n'pop': [1.5, 1.7, 3.6, 2.4, 2.9]}\n\n\ndata\n\n\n# Convert sang data.frame\nframe = pd.DataFrame(data)\n\n\nframe\n\n\nframe2 = pd.DataFrame(data, columns=['year', 'state', 'pop', 'debt'],\n                  index=['one', 'two', 'three', 'four', 'five'])\n\n\nframe2\n\n\n\n\n4.1.2 Làm việc với DataFrame\n\n4.1.2.1 Chọn một biến\n\nframe2.year\n\n\nframe2['year']\n\n\nframe2[['year', 'state']]\n\n\n\n4.1.2.2 Tạo biến mới\n\nframe2['debt'] = 16.5\nframe2\n\n\nframe2['debt'] = np.arange(5.)\nframe2\n\n\n\n4.1.2.3 Index với loc và iloc\n\ndata = pd.Series(['a', 'b', 'c'], index = [1,3,5])\n\n\ndata\n\n\n# Sử dụng index\ndata[1]\n\n\ndata.loc[1]\n\n\n# Sử dụng index theo vị trí, không phụ thuộc vào index\ndata.iloc[1]\n\n\ndata.iloc[2]"
  },
  {
    "objectID": "p01-05-pandas.html#import-dữ-liệu-trong-pandas",
    "href": "p01-05-pandas.html#import-dữ-liệu-trong-pandas",
    "title": "4  Pandas",
    "section": "4.2 Import dữ liệu trong pandas",
    "text": "4.2 Import dữ liệu trong pandas\n\n4.2.1 Kết nối với database\nĐọc dữ liệu từ Database\n# Do not run\nimport pyodbc\nconn = pyodbc.connect(\n    r'DRIVER={ODBC Driver 13 for SQL Server};'\n    r'SERVER=ADMINMI-JTBJEPG;' # Name of server\n    r'DATABASE=learningsql;'   # Data base\n    r'UID=sa;'                 # User\n    r'PWD=123456'              # Password\n    )\n# cursor = conn.cursor()\nimport pandas as pd\n\ndf = pd.read_sql_query('SELECT * FROM ACCOUNT', conn)\ndf.head\ndf.describe()\nGhi dữ liệu vào database\n\ntip = pd.read_csv(\"99_dataset/tips.csv\")\nfrom sqlalchemy import create_engine\n\ncon = create_engine('mssql+pyodbc://sa:123@ADMIN/analytics?driver=ODBC Driver 13 for SQL Server')\ntip.to_sql('tip', con, if_exists='replace')\n\n\n\n4.2.2 Import từ csv\n\ndf = pd.read_csv(\"file.csv\")\n\n\nKiểm tra các kiểu dữ liệu có thể đọc\n\n\n?pd.read_*\n\n\n?pd.read_csv"
  },
  {
    "objectID": "p01-05-pandas.html#các-câu-lệnh-cơ-bản-với-dataframe",
    "href": "p01-05-pandas.html#các-câu-lệnh-cơ-bản-với-dataframe",
    "title": "4  Pandas",
    "section": "4.3 Các câu lệnh cơ bản với dataframe",
    "text": "4.3 Các câu lệnh cơ bản với dataframe\n\nfrom sklearn import datasets\ndf = datasets.load_iris()\n\n\nimport pandas as pd\n\n\niris = pd.DataFrame(df.data,\n                   columns = df.feature_names)\niris.head(3)\n\n\niris.columns\n\n\n4.3.1 Rename\nCấu trúc: df.rename(columns = {old_var : new_var})\n\niris2 = iris.rename(columns = {'sepal length (cm)' : 'sepal_length',\\\n                   'sepal width (cm)' : 'sepal_width',\n                   'petal length (cm)' : 'petal_length',\n                   'petal width (cm)' : 'petal_width'})\n\n\niris2.columns\n\n\n\n4.3.2 Tạo biến mới\n\niris2['new_var'] = 17\n\n\niris2.head(3)\n\n\n# Drop biến\niris2 = iris2.drop('new_var',\\\n                  axis = 'columns')\n\n\niris2.head(3)\n\n\nTrong pandas, do DF được xử lý theo cả hai chiều nên cần khai báo axis = ‘columns’\nCó thể rename index, khi đó khai báo axis = 'index'\n\n\niris2.rename({1:'a'}, axis = 'index').head(4)\n\n\n\n4.3.3 Select\n\nTrong pandas, cách chọn biến không cho phép sử dụng lazy evaluation nên phép select phải liệt kê các cột tương tự như trong R base\n\nR\nselect(df, var1, var2)\nselect(df, -var3)\nPython\ndf[[‘var1’, ‘var2’]]\ndf.drop(‘var3’, 1)\n\ncol_var = ['sepal_length', 'sepal_width']\n\n\niris2[col_var].head(4)\n\n\n# Bỏ biến sepal_length\niris2.drop('sepal_length', 1).head(3)\n\nLưu ý: Do dataframe của Python đánh dấu theo hai chiều: 0 - dòng, 1 - cột. Do đó, cần thêm index 1 để thể hiện drop theo cột\n\nSelect trong pandas cho phép tương tự select_if trong dplyr\n\n\niris2.get_dtype_counts()\n\n\niris2.select_dtypes(include = ['float64']).head(3)\n\n\nChọn theo row cho phép sử dụng toán tử : như R\n\n\niris2[1:3]\n\n\n4.3.3.1 Select nâng cao\nTrong pandas, ta có thể lọc biến nâng cao với 3 options: loc, iloc và ix.\n\niloc: Cho phép lấy biến theo vị trí dạng integer\nloc: Cho phép lọc theo tên\nix: Cho phép lọc theo cả hai cách trên. Tuy nhiên, ix ngày càng ít dùng\n\n\niris2\n\n\niris2.iloc[:3, :2]\n\n\niris2.loc[:4,'sepal_width':'petal_width']\n\n\niris2.ix[:4, 'sepal_width':'petal_width']\n\n\n\n\n4.3.4 Arrange\nKhông giống như R, sort_values là method trong Python\ndf.sort_values('var1')\ndf.sort_values('var1', ascending=False)\n\niris2.sort_values('sepal_length').head(3)\n\n\n\n4.3.5 Filter\nR\nfilter(df, var &gt; 20000 & var &lt; 30000)\nfilter(df, var == ‘string’) # df %&gt;% filter(var != ‘string’)\ndf %&gt;% filter(var != ‘string’)\ndf %&gt;% group_by(group) %&gt;% filter(sum(var) &gt; 2000000)\nPython\ndf[(df[‘var’] &gt; 20000) & (df[‘var’] &lt; 30000)]\ndf[df[‘var’] == ‘string’]\ndf[df[‘var’] != ‘string’]\ndf.groupby(‘group’).filter(lambda x: sum(x[‘var’]) &gt; 2000000)\nCấu trúc filter của Pandas tương tự như R base\n\niris2[iris2['sepal_length'] &lt;10]\n\n\niris2.filter('sepal_length')\n\n\nPandas cho phép filter theo hai cách là loc và iloc\n\nloc cho phép lọc theo tên\niloc cho phép lọc theo vị trí\n\n\n\niris2.head(3)\n\n\niris2.index\n\n\n# Lấy theo iloc của index\niris2.iloc[2]\n\n\niris2[iris2['sepal_length'] == 5.1]\n\nTìm hiêu thêm về loc và iloc:\n\ndf.loc[row_index, column_index]: cho phép lựa chọn theo thứ tự và sử dụng toán tử : như R nhưng chỉ cho phép từ index_1 đến index_2-1\ndf.iloc[row_index, column_index]\n\n\niris2.iloc[2:5, 0:2]\n\n\niris2.loc[2:5, ['sepal_length', 'petal_length']]\n\nCác phương pháp này có thể được sử dụng trong việc gán\n\niris2.iloc[1:4, 3:4] = 1\n\n\niris2.iloc[1:4, 3:4]\n\n\n\n4.3.6 group by\nR\ndf %&gt;% group_by(group)\ndf %&gt;% group_by(group1, group2)\ndf %&gt;% ungroup()\nPython\ndf.groupby(‘group1’)\ndf.groupby([‘group1’, ‘group2’])\ndf.reset_index()\ndf.groupby(‘group1’, as_index=False)\n\ndf = pd.DataFrame({'group': ['A', 'B', 'C', 'A', 'B', 'C'],\n                    'value1': [3,2,1,4,5,3],\n                     'value2': [2,4,3,2,1,5]})\n\n\ndf.head(3)\n\n\ndf.groupby('group')\n\n\n4.3.6.1 Group summarise\nR\ndf %&gt;% group_by(group) %&gt;% summarise(mean_var1 = mean(var1))\ndf %&gt;% group_by(group1, group2) %&gt;% summarise(mean_var1 = mean(var1), sum_var1 = sum(var1), count_var1 = n())\nPython\n\ndf.groupby(‘group1’)[‘var1’].agg({‘mean_col’ : np.mean()})`\ndf.groupby(['group1', 'group2'])['var1]'].agg(['mean', 'sum', 'count'])\n\nTương ứng như group_by trong dplyr, groupby trong Python cho phép nhóm và thực hiện các câu lệnh tương ứng. Khi không đặt điều kiện cụ thể, nhóm aggregate sẽ áp dụng cho tất cả các biến\n\ndf.groupby('group').aggregate(np.mean)\n\n\ndf.groupby('group')['value1'].agg(['mean', 'sum', 'max'])\n\n\n# Summarise chỉ với var1 và đặt tên\ndf.groupby('group')['value1'].agg({'mean_value1': 'mean',\n                                  'sum_value1': np.sum})\n\n\ndf.groupby('group').aggregate(np.mean)\n\n\n\n4.3.6.2 Group mutate\nR\ndf %&gt;% group_by(group) %&gt;% mutate(mean_var1 = mean(var1))\nPython\ndf.groupby(‘group’)[‘var1’].transform(np.mean)\n\n# Biến đổi biến value thành mean trong từng nhóm\ndf.groupby('group').transform('mean')\n\n\ndf['mean_value1'] = df.groupby('group')['value1'].transform('mean')\n\n\ndf\n\n\nTạo thêm biến mới\n\n\n# Tạo hàm normalize\ndef normalize(x):\n    return (x - np.mean(x)) / np.std(x)\n\n\nx = [3,2,3,1,3,4,5,6,8]\n\n\nnp.mean(x)\n\n\nnp.std(x)\n\n\nnormalize(x)\n\n\ndf.groupby('group').transform(normalize)"
  },
  {
    "objectID": "p01-05-pandas.html#join",
    "href": "p01-05-pandas.html#join",
    "title": "4  Pandas",
    "section": "4.4 Join",
    "text": "4.4 Join\nTương tự như R, join trong Python có thể dùng hàm merge\n\n4.4.1 Cùng tên key\n\ndf1 = pd.DataFrame({'employee': ['Bob', 'Jake', 'Lisa', 'Sue'],\n                    'group': ['Accounting', 'Engineering', 'Engineering', 'HR']})\ndf2 = pd.DataFrame({'employee': ['Lisa', 'Bob', 'Jake'],\n                    'hire_date': [2004, 2008, 2012]})\nprint(df1); print(df2)\n\n\npd.merge(df1, df2)\n\nLưu ý: Khi dùng merge, sẽ tự động bỏ các trường không chứa trong cả 2 bảng. Nếu muốn chuyển thành left_join, cần thêm option how\n\npd.merge(df1, df2, how = \"left\")\n\n\npd.merge(df1, df2, how = 'right')\n\n\n\n4.4.2 Khác tên key\n\ndf3 = pd.DataFrame({'name': ['Bob', 'Jake', 'Lisa', 'Sue'],\n                    'salary': [70000, 80000, 120000, 90000]})\nprint(df1); print(df3);\n\n\npd.merge(df1, df3, left_on = 'employee', right_on = 'name')\n\n\n# Drop name khi không cần thiết\npd.merge(df1, df3, left_on = 'employee', right_on = 'name').drop('name', axis = 1)"
  },
  {
    "objectID": "p01-05-pandas.html#ghép-dữ-liệu",
    "href": "p01-05-pandas.html#ghép-dữ-liệu",
    "title": "4  Pandas",
    "section": "4.5 Ghép dữ liệu",
    "text": "4.5 Ghép dữ liệu\n\n4.5.1 Ghép dòng\n\ndf1 = pd.DataFrame(\n{\"a\" : [4 ,5, 6], \n\"b\" : [7, 8, 9]},    \nindex = [1, 2, 3])\n\ndf2 = pd.DataFrame({\n    \"a\" : [1,2],\n    \"b\" : [8, 9]\n})\nprint(df1); print(df2)\n\n\nimport pandas as pd\npd.concat([df1, df2])\n\n\ndf3 = pd.DataFrame({\n    \"c\" : ['x', 'y', 'z']})\n\n\npd.concat([df1, df3], axis = 1)\n\nLưu ý: Xảy ra lỗi trên vì df1 và df3 đang có 2 hệ thống index khác nhau. Muốn concat bình thường cần reset index\n\npd.concat([df1.reset_index(), df3], axis = 1)\n\n\n\n4.5.2 Tổng hợp dữ liệu\n\nmy_df = pd.DataFrame({\n    'group' : np.random.randint(1,5, 20),\n    'x' : np.random.normal(10,1, 20),\n    'y' : np.random.normal(1, 10, 20)\n})\nmy_df\n\n\n# Summary toàn bộ data.frame\nmy_df.describe()\n\n\n#Summary theo nhóm\nmy_df.groupby('group')['x'].describe()\n\n\n# Summary theo nhóm, chuyển thành data.frame\nmy_df.groupby('group')['x'].describe().unstack()\n\n\n\n4.5.3 Aggregate, filter, transform & apply\nTương tự như R, Python cũng có thể áp dụng phương pháp: filter, transform, apply\n\n# Set seed\nrng = np.random.RandomState(0)\ndf = pd.DataFrame({'key': ['A', 'B', 'C', 'A', 'B', 'C'],\n                    'data1': range(6),\n                    'data2': rng.randint(0, 10, 6)},\n                    columns = ['key', 'data1', 'data2'])\ndf\n\n\ndf.groupby('key').aggregate(['min', np.median])\n\n\n# Tìm min của data1 và max data2\n\n\ndf.groupby('key').aggregate({'data1': 'min',\n                           'data2': np.median})\n\n\n\n4.5.4 Filter\n\ndef filter_func(x):\n    return x['data2'].std &gt; 4\n\n\n#df.groupby('key').std()\ndf2 = df.groupby('key').aggregate('std')\nprint(df); print(df2)\ndf2\n\n\n\n4.5.5 Apply\nToán tử x/= y tương ứng với \\(x = \\frac{x}{y}\\)\n\ndef norm_data2(x):\n    x['data1'] /= x['data2'].sum()\n    return x\n\n\ndf.groupby('key').apply(norm_data2)\n\n\n\n4.5.6 Kiểm tra các đặc tính khác của df\n\ndf.dtypes\n\n\ndf.info()\n\n\n# Plot data\niris2.plot()\n\n\niris2['sepal_length'].plot()\n\n\n\n4.5.7 Làm việc với missing value\n\ndata_null = pd.Series([1, np.nan, 'hello', None])\n\n\ndata_null.isnull()\n\n\ndf_null = pd.DataFrame([[1, np.nan, 3],\n                        [2, 3, np.nan],\n                        [1,2,3]])\ndf_null\n\n\n# dropna sẽ loại tất cả các dòng chứa missing value\ndf_null.dropna()\n\n\ndf_null.dropna(axis = 'columns')\n\n\nfillna: Cho phép điền giá trị thiếu vào missing value\n\n\ndf_null.fillna(99)"
  },
  {
    "objectID": "p01-05-pandas.html#pivot-table",
    "href": "p01-05-pandas.html#pivot-table",
    "title": "4  Pandas",
    "section": "4.6 Pivot table",
    "text": "4.6 Pivot table\nTương tự như reshape2 của R với dcast, pandas cho phép sử dụng pivot table\n\nimport seaborn as sns\n\n\ntitanic = pd.read_csv('./99_dataset/titanic.csv')\n\n\ntitanic.pivot_table(index = 'sex', columns = 'class',\n                   aggfunc = {'survived': sum,\n                             'fare': 'mean'})"
  },
  {
    "objectID": "p01-05-pandas.html#melt-data",
    "href": "p01-05-pandas.html#melt-data",
    "title": "4  Pandas",
    "section": "4.7 Melt data",
    "text": "4.7 Melt data\n\nmy_df = pd.DataFrame({\n    'id' : [1,2,3],\n    'var1' : [3,4,5],\n    'var2' : ['a', 'a', 'b'],\n    'var3' : ['x', 'y', 'z']\n})\n\n\nmy_df\n\n\npd.melt(my_df, 'id')\n\n\npd.melt(my_df, ['id', 'var1'])"
  },
  {
    "objectID": "p01-05-pandas.html#các-hàm-khác",
    "href": "p01-05-pandas.html#các-hàm-khác",
    "title": "4  Pandas",
    "section": "4.8 Các hàm khác",
    "text": "4.8 Các hàm khác\n\n4.8.1 Lag\n\ndf = pd.DataFrame({\n    'date' : [1,2,3],\n    'value' : [6,7,8]\n})\ndf\n\n\ndf['value_1'] = df['value'].shift(1)\n\n\ndf\n\n\n\n4.8.2 Rank\n\nmy_df = pd.DataFrame({\n    'id' : [1,2,3],\n    'var1' : [5,4,2],\n    'var2' : ['a', 'a', 'b'],\n    'var3' : ['x', 'y', 'z']\n})"
  },
  {
    "objectID": "p01-05-pandas.html#lưu-dữ-liệu",
    "href": "p01-05-pandas.html#lưu-dữ-liệu",
    "title": "4  Pandas",
    "section": "4.9 Lưu dữ liệu",
    "text": "4.9 Lưu dữ liệu\n\nmy_df = pd.DataFrame({\n    'x' : [1,2,3],\n    'y' : [3,4,5],\n    'group' : ['a', 'a', 'b']\n})\n\n\nimport pickle \n\n\n# Save data\nmy_df.to_pickle('my_df.pkl')\n\n\n# Load dữ liệu\nmy_df2 = pd.read_pickle('my_df.pkl')\n\n\nmy_df2.head()"
  },
  {
    "objectID": "p01-05-pandas.html#tài-liệu-tham-khảo",
    "href": "p01-05-pandas.html#tài-liệu-tham-khảo",
    "title": "4  Pandas",
    "section": "4.10 Tài liệu tham khảo",
    "text": "4.10 Tài liệu tham khảo\n\nhttps://github.com/jorisvandenbossche/pandas-tutorial\n\n\nlist_df = %who_ls DataFrame\n\nfor x in list_df[:2]:\n    eval(x)['new'] = 'a'\n    \nlist_df[:2]"
  },
  {
    "objectID": "p01-06-datetime.html",
    "href": "p01-06-datetime.html",
    "title": "5  Dữ liệu thời gian trong Python",
    "section": "",
    "text": "Trong Python, cấu trúc của datetime tương tự như R. Package numpy cũng cho phép làm việc với datetime hiệu quả.\n\nimport numpy as np\nmy_date = np.array('2019-01-02', dtype = np.datetime64)\nmy_date\n\narray('2019-01-02', dtype='datetime64[D]')\n\n\n\nmy_date + np.arange(5)\n\narray(['2019-01-02', '2019-01-03', '2019-01-04', '2019-01-05',\n       '2019-01-06'], dtype='datetime64[D]')\n\n\nTuy nhiên, trong pandas, cấu trúc dữ liệu của datetime sẽ tương ứng với lubridate của R nhất. Xem các ví dụ sau\n\nimport pandas as pd\nmy_date2 = pd.to_datetime('2019-01-01')\nmy_date2\n\nTimestamp('2019-01-01 00:00:00')\n\n\n\nmy_date2.day_name()\n\n'Tuesday'\n\n\n\n# Thứ trong tuần\nmy_date2.dayofweek\n\n1\n\n\n\n# Extract tháng\nmy_date2.month_name()\n\n'January'\n\n\n\n# Extract tháng dạng số\nmy_date2.month\n\n1\n\n\nCộng trừ vector ngày\n\nmy_date2 + pd.to_timedelta(np.arange(12), 'D')\n\nDatetimeIndex(['2019-01-01', '2019-01-02', '2019-01-03', '2019-01-04',\n               '2019-01-05', '2019-01-06', '2019-01-07', '2019-01-08',\n               '2019-01-09', '2019-01-10', '2019-01-11', '2019-01-12'],\n              dtype='datetime64[ns]', freq=None)"
  },
  {
    "objectID": "p01-07-lam-viec-voi-text.html#methods-với-string",
    "href": "p01-07-lam-viec-voi-text.html#methods-với-string",
    "title": "6  Biến đổi dữ liệu text trong python",
    "section": "6.1 Methods với string",
    "text": "6.1 Methods với string\n\ntext = ' Hello Việt Nam '\ntext\n\n' Hello Việt Nam '\n\n\n\n# Thay Vi bằng VN\ntext.replace('Vi', \"VN\")\n\n' Hello VNệt Nam '\n\n\n\n# Cắt các khoảng trắng trước và sau text\ntext.strip()\n\n'Hello Việt Nam'\n\n\n\n# Lower\ntext.lower()\n\n' hello việt nam '\n\n\n\n# Upper\ntext.upper()\n\n' HELLO VIỆT NAM '\n\n\n\n# lower và cắt khoảng trăng\ntext.lower().strip()\n\n'hello việt nam'"
  },
  {
    "objectID": "p01-07-lam-viec-voi-text.html#regular-expression-với-regex",
    "href": "p01-07-lam-viec-voi-text.html#regular-expression-với-regex",
    "title": "6  Biến đổi dữ liệu text trong python",
    "section": "6.2 Regular expression với regex",
    "text": "6.2 Regular expression với regex\nCác methods trong string có thể giải quyết được các vấn đề cơ bản khi biến đổi dữ liệu text. Tuy nhiên, để làm việc với regular expression cần sử dụng library re\n\nimport re\ntext = 'Bạn VN Nammmm cần làm ***'\n\n\n# Thay thế VN bằng Việt Nam\nre.sub('VN', 'Việt Nam', text)\n\n'Bạn Việt Nam Nammmm cần làm ***'\n\n\n\n# Tìm vị trí chữ m xuất hiện 2 lần hoặc nhiều hơn, thay bằng m\nre.sub('m{4,}', 'm', text)\n\n'Bạn VN Nam cần làm ***'\n\n\n\n# Tìm vị trí ký tự * xuất hiện 3 lần, remove và xóa khoảng trăng\n\n\nnew_text = re.sub('\\*{3}', \"\", text).strip()\nnew_text\n\n'Bạn VN Nammmm cần làm'"
  },
  {
    "objectID": "p01-08-matplotlib.html#cơ-bản-về-matplotlib",
    "href": "p01-08-matplotlib.html#cơ-bản-về-matplotlib",
    "title": "7  Trực quan hóa với Matplotlib",
    "section": "7.1 Cơ bản về matplotlib",
    "text": "7.1 Cơ bản về matplotlib\nmatplotlib là thư viện được sử dụng rộng rãi trong Python khi trực quan hóa dữ liệu.\n\nimport numpy as np\nimport matplotlib as mlt\nimport matplotlib.pyplot as plt\n# %matplotlib inline\n\n\n# Sử dụng style plot\nplt.style.use('seaborn')\n\nC:\\Users\\Hoang Duc Anh\\AppData\\Local\\Temp\\ipykernel_7740\\4269312434.py:2: MatplotlibDeprecationWarning:\n\nThe seaborn styles shipped by Matplotlib are deprecated since 3.6, as they no longer correspond to the styles shipped by seaborn. However, they will remain available as 'seaborn-v0_8-&lt;style&gt;'. Alternatively, directly use the seaborn API instead.\n\n\n\nmatplotlib có chứa nhiều style khác nhau. Ta có thể kiểm tra với câu lệnh sau\n\nplt.style.available\n\n['Solarize_Light2',\n '_classic_test_patch',\n '_mpl-gallery',\n '_mpl-gallery-nogrid',\n 'bmh',\n 'classic',\n 'dark_background',\n 'fast',\n 'fivethirtyeight',\n 'ggplot',\n 'grayscale',\n 'seaborn-v0_8',\n 'seaborn-v0_8-bright',\n 'seaborn-v0_8-colorblind',\n 'seaborn-v0_8-dark',\n 'seaborn-v0_8-dark-palette',\n 'seaborn-v0_8-darkgrid',\n 'seaborn-v0_8-deep',\n 'seaborn-v0_8-muted',\n 'seaborn-v0_8-notebook',\n 'seaborn-v0_8-paper',\n 'seaborn-v0_8-pastel',\n 'seaborn-v0_8-poster',\n 'seaborn-v0_8-talk',\n 'seaborn-v0_8-ticks',\n 'seaborn-v0_8-white',\n 'seaborn-v0_8-whitegrid',\n 'tableau-colorblind10']\n\n\n\n# Ví dụ 1\nx = np.linspace(0, 10, 100)\n\n\nplt.plot(x, np.sin(x))\nplt.plot(x, np.cos(x))\nplt.show()\n\n\n\n\nGiải thích: - pyplot tạo một object plot. Các câu lệnh của plt sẽ thay đổi các thành phần trong plot (add, remove, modify…). - plt.show() sẽ hiển thị object cuối cùng sau khi đã thực hiện toàn bộ câu lệnh. - Khi thực hiện option %matplotlib inline, sẽ không cần sử dụng plt.show()"
  },
  {
    "objectID": "p01-08-matplotlib.html#điều-chỉnh-chi-tiết-plot",
    "href": "p01-08-matplotlib.html#điều-chỉnh-chi-tiết-plot",
    "title": "7  Trực quan hóa với Matplotlib",
    "section": "7.2 Điều chỉnh chi tiết plot",
    "text": "7.2 Điều chỉnh chi tiết plot\n\nx = np.linspace(0, 10, 100)\n# Tạo object figure\nfig = plt.figure()\nplt.plot(x, np.sin(x), '-')\nplt.plot(x, np.cos(x), '--')\n\n\n\n\n# Save plot\nfig.savefig('my_figure.png')"
  },
  {
    "objectID": "p01-08-matplotlib.html#hai-cách-xây-dựng-biểu-đồ",
    "href": "p01-08-matplotlib.html#hai-cách-xây-dựng-biểu-đồ",
    "title": "7  Trực quan hóa với Matplotlib",
    "section": "7.3 Hai cách xây dựng biểu đồ",
    "text": "7.3 Hai cách xây dựng biểu đồ\n\n7.3.1 Matlab style\nCách này được thực hiện tương tự như matlab, cách thức thực hiện như sau: - Tạo biểu đồ - Tạo subplot trong biểu đồ, xác định tọa độ và add biểu đồ con\n\n# Tạo figure\nplt.figure() \n# Tạo khu vực 2 hàng, 1 cột, 1 panel\nplt.subplot(2,1,1) # Add plot vào panel số 1\nplt.plot(x, np.sin(x))\nplt.subplot(2,1,2) # Add plot vào panel số 2\nplt.plot(x, np.cos(x))\nplt.show()\n\n\n\n\nLưu ý: Hai biểu đồ phải được đặt cùng trong 1 cell\n\n\n7.3.2 Object oriented style\nSử dụng plt.subplots(), kết quả trả ra là 2 object dạng figure và axes trong matplotlib. - figure là 1 đối tượng của class plt.Figure, bao gồm tất cả thành phần của biểu đồ (trục, label, đồ thị) - axes là khung thể hiện của figure\nHai câu lệnh sau là tương đương\n# Cách 1\nfig = plt.figure()\nax = plt.axes()\n\n# Cách 2\nfig, ax = plt.subplots()\n\nfig, ax = plt.subplots(2)\nax[0].plot(x, np.sin(x))\nax[1].plot(x, np.cos(x), '--')\n\n\n\n\n\ntype(fig)\n\nmatplotlib.figure.Figure\n\n\n\ntype(ax)\n\nnumpy.ndarray"
  },
  {
    "objectID": "p01-08-matplotlib.html#điều-chỉnh-các-thành-phần-cơ-bản",
    "href": "p01-08-matplotlib.html#điều-chỉnh-các-thành-phần-cơ-bản",
    "title": "7  Trực quan hóa với Matplotlib",
    "section": "7.4 Điều chỉnh các thành phần cơ bản",
    "text": "7.4 Điều chỉnh các thành phần cơ bản\n\n7.4.1 Biểu đồ đường\n\nplt.style.use('seaborn-whitegrid')\n\nC:\\Users\\Hoang Duc Anh\\AppData\\Local\\Temp\\ipykernel_7740\\2414357448.py:1: MatplotlibDeprecationWarning:\n\nThe seaborn styles shipped by Matplotlib are deprecated since 3.6, as they no longer correspond to the styles shipped by seaborn. However, they will remain available as 'seaborn-v0_8-&lt;style&gt;'. Alternatively, directly use the seaborn API instead.\n\n\n\n\nfig = plt.figure()\nax = plt.axes()\nx = np.linspace(0, 10, 100)\nax.plot(x, np.sin(x))\nplt.show()\n\n\n\n\n\nplt.plot(x, np.sin(x), color = 'red')\nplt.plot(x, np.cos(x), color = 'blue', linestyle = 'dashed')\nplt.show()\n\n\n\n\n\n# Điều chỉnh định dạng\nplt.plot(x, x, linestyle = '-')\nplt.plot(x, x + 1, linestyle = '--') # dash\nplt.plot(x, x + 2, linestyle = '-.') # dash dot\nplt.plot(x, x + 3, linestyle = ':')  # dot\nplt.show()\n\n\n\n\n\n\n7.4.2 Điều chỉnh xlim, ylim\n\nplt.plot(x, np.sin(x))\nplt.xlim(-1, 11)\nplt.ylim(0.5, 1)\nplt.show()\n\n\n\n\n\n# Cách 2\nplt.plot(x, np.sin(x))\nplt.axis([-1, 11, 0.5, 1]) # x = [-1, 11], y = [0.5, 1]\n\n(-1.0, 11.0, 0.5, 1.0)\n\n\n\n\n\n\n\n7.4.3 Điều chỉnh tên\n\nplt.plot(x, np.sin(x))\nplt.title('Biểu đồ sin')\n\nText(0.5, 1.0, 'Biểu đồ sin')\n\n\n\n\n\n\n\n7.4.4 Điều chỉnh chú giải\n\nplt.plot(x, np.sin(x), label = 'sin')\nplt.plot(x, np.cos(x), label = 'cos')\nplt.legend()\nplt.axis('equal')\nplt.title('Đồ thị sin và cos')\n\nText(0.5, 1.0, 'Đồ thị sin và cos')\n\n\n\n\n\n\n\n7.4.5 Methods ax\nLưu ý: Các phương pháp sử dụng hàm plt và methods axes là tương đương nhau\n\nplt.xlabel() → ax.set_xlabel()\nplt.ylabel() → ax.set_ylabel()\nplt.xlim() → ax.set_xlim()\nplt.ylim() → ax.set_ylim()\nplt.title() → ax.set_title()\n\n\nax = plt.axes()\nax.plot(x, np.sin(x))\nax.set(xlim = (0, 10), ylim = (-2, 2),\n      xlabel = 'x', ylabel = 'sin(x)',\n      title = 'Biểu đồ sin(x)')\n\n[(0.0, 10.0),\n (-2.0, 2.0),\n Text(0.5, 0, 'x'),\n Text(0, 0.5, 'sin(x)'),\n Text(0.5, 1.0, 'Biểu đồ sin(x)')]"
  },
  {
    "objectID": "p01-08-matplotlib.html#các-loại-biểu-đồ-thường-dùng",
    "href": "p01-08-matplotlib.html#các-loại-biểu-đồ-thường-dùng",
    "title": "7  Trực quan hóa với Matplotlib",
    "section": "7.5 Các loại biểu đồ thường dùng",
    "text": "7.5 Các loại biểu đồ thường dùng\n\n7.5.1 Scatter plot\n\nx = np.linspace(0, 10, 30)\ny = np.sin(x)\nplt.plot(x, y, 'o')\nplt.ylim(-1.5, 1.5)\n\n(-1.5, 1.5)\n\n\n\n\n\n\nplt.plot(x, y, '-ok')\nplt.ylim(-1.5, 1.5)\n\n(-1.5, 1.5)\n\n\n\n\n\n\n\n7.5.2 Sử dụng plt.scatter\nplt.scatter cho phép linh hoạt hơn so với plt.plot nhưng tốc độ xử lý sẽ chậm hơn\n\nrng = np.random.RandomState(0)\nx = rng.randn(100)\ny = rng.randn(100)\ncolors = rng.rand(100)\nsizes = 1000 * rng.rand(100)\nplt.scatter(x, y, c=colors, s=sizes, alpha=0.3,\n                   cmap='viridis')\nplt.colorbar();  # show color scale\n\n\n\n\n\n\n7.5.3 Contour plot\n\ndef my_value(x, y):\n    return np.sin(x) ** 10 + np.cos(10 + x*y) * np.cos(x)\n\n\nx = np.linspace(0, 5, 50)\ny = np.linspace(0, 5, 40)\nX, Y = np.meshgrid(x, y)\nZ = my_value(X, Y) \n\n\nplt.contour(X, Y, Z, colors = \"blue\")\n\n&lt;matplotlib.contour.QuadContourSet at 0x1d9ef761600&gt;\n\n\n\n\n\n\nplt.contour(X, Y, Z, 20, cmap='RdGy')\nplt.colorbar()\n\n&lt;matplotlib.colorbar.Colorbar at 0x1d9ee8816f0&gt;\n\n\n\n\n\n\nplt.contourf(X, Y, Z, 20, cmap='RdGy')\nplt.colorbar();\n\n\n\n\n\n\n7.5.4 Histogram\n\nx = np.random.normal(0, 1, 1000)\nplt.hist(x, color = 'steelblue', alpha = 0.7)\n#Add đường giá trị trung bình\nplt.axvline(x = np.mean(x), color = 'darkred', linestyle = '--')\n\n&lt;matplotlib.lines.Line2D at 0x1d9ee7dd0c0&gt;\n\n\n\n\n\n\n\n7.5.5 Text\nTa có thể còn annotate bằng cách dùng method ax.annotate\n\nx = np.random.normal(0,1,1000)\n\n\nfig, ax = plt.subplots()\nax.hist(x, color = 'steelblue', alpha = 0.7)\n#Add đường giá trị trung bình\nax.axvline(x = np.mean(x), color = 'darkred', linestyle = '--')\nax.annotate('Mean = 0', xy = (0.5, 250))\n\nText(0.5, 250, 'Mean = 0')"
  },
  {
    "objectID": "p01-08-matplotlib.html#tài-liệu-tham-khảo",
    "href": "p01-08-matplotlib.html#tài-liệu-tham-khảo",
    "title": "7  Trực quan hóa với Matplotlib",
    "section": "7.6 Tài liệu tham khảo",
    "text": "7.6 Tài liệu tham khảo\n\nPython Data Science Handbook - Chương 4"
  },
  {
    "objectID": "p01-09-seaborn.html#giới-thiệu-cơ-bản",
    "href": "p01-09-seaborn.html#giới-thiệu-cơ-bản",
    "title": "8  Seaborn vizualization",
    "section": "8.1 Giới thiệu cơ bản",
    "text": "8.1 Giới thiệu cơ bản\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_style('white')\n# %matplotlib inline\n# Đặt retina resolution\n# %config InlineBackend.figure_format = 'retina'\n\n\nsns.__version__\n\n\ntitanic = pd.read_csv(\"./99_dataset/titanic.csv\")\niris = pd.read_csv(\"./99_dataset/iris.csv\")\ntips = pd.read_csv(\"./99_dataset/tips.csv\")\niris.head()\n\n\ntitanic.head()\n\n\ng = sns.catplot(x= \"class\", \n            y = \"survived\", \n            hue = \"sex\", # Biến group\n            data = titanic, kind = \"bar\")\n\n\ng.set_axis_labels(\"Class\", \"Survived\")\n\n\nplt.show(g)"
  },
  {
    "objectID": "p01-09-seaborn.html#biểu-đồ-cơ-bản",
    "href": "p01-09-seaborn.html#biểu-đồ-cơ-bản",
    "title": "8  Seaborn vizualization",
    "section": "8.2 Biểu đồ cơ bản",
    "text": "8.2 Biểu đồ cơ bản\n\n8.2.1 Scatterplot\n\np = sns.stripplot(x = \"species\", y = \"sepal_length\", data = iris)\nplt.show(p)\n\n\nsns.relplot('sepal_length', 'sepal_width', data = iris,\n            col = 'species',\n            hue = 'species')\n\nLưu ý: Ta nên sử dụng relplot khi vẽ scatter plot do câu lệnh này cho phép xây dựng biểu đồ linh hoạt hơn\n\n\n8.2.2 Point plot\n\ntips.describe()\n\n\nsns.pointplot(x=\"tip\", y=\"total_bill\", data=tips)\n# Add thêm annotate\nplt.annotate('Average: 9', xy = (5, 25))\nplt.show()\n\n\n\n8.2.3 Bar chart\n\nmy_plot = sns.barplot(\"sex\", y = \"survived\", hue = \"class\", data = titanic)\nmy_plot.set(title = \"My chart\", xlabel = \"Sex\", ylabel = \"Survived\")"
  },
  {
    "objectID": "p01-09-seaborn.html#distribution-plot",
    "href": "p01-09-seaborn.html#distribution-plot",
    "title": "8  Seaborn vizualization",
    "section": "8.3 Distribution plot",
    "text": "8.3 Distribution plot\n\n8.3.1 Histogram & density\n\nsns.distplot(iris['sepal_length'])\nsns.distplot(iris['sepal_width'])\n\n\n\n8.3.2 Kernel density\n\nsns.kdeplot(iris[iris.columns[0:2]])\n\n\n\n8.3.3 Joint plot\n\n# Joint plot\nwith sns.axes_style(\"white\"):\n    sns.jointplot('sepal_length', 'sepal_width', iris, kind = \"kde\")\n\n\n# Joint plot\nwith sns.axes_style(\"white\"):\n    sns.jointplot('sepal_length', 'sepal_width', iris, kind = \"hex\")"
  },
  {
    "objectID": "p01-09-seaborn.html#pair-plot",
    "href": "p01-09-seaborn.html#pair-plot",
    "title": "8  Seaborn vizualization",
    "section": "8.4 Pair plot",
    "text": "8.4 Pair plot\n\nsns.pairplot(iris,\n            hue = 'species') # Chia nhóm"
  },
  {
    "objectID": "p01-09-seaborn.html#facet",
    "href": "p01-09-seaborn.html#facet",
    "title": "8  Seaborn vizualization",
    "section": "8.5 Facet",
    "text": "8.5 Facet\nseaborn hỗ trợ hệ thống facet\n\ntips = pd.read_csv(\"./99_dataset/tips.csv\")\n\n\ntips.head()\n\n\n# Chưa chia facet\nplt.hist(tips['total_bill'])\n\n\n# Chia facet\ngrid = sns.FacetGrid(tips, row = \"time\", col = \"sex\")\ngrid.map(plt.hist, 'total_bill')\n\n\n# Chia facet\ngrid = sns.FacetGrid(tips, row = \"time\", col = \"sex\")\ngrid.map(sns.distplot, \"total_bill\")"
  },
  {
    "objectID": "p01-09-seaborn.html#category-plot",
    "href": "p01-09-seaborn.html#category-plot",
    "title": "8  Seaborn vizualization",
    "section": "8.6 Category plot",
    "text": "8.6 Category plot\n\n8.6.1 Factor plot\n\nwith sns.axes_style(style = \"ticks\"):\n    g = sns.factorplot(\"day\", \"total_bill\", \"sex\", data = tips, kind = \"box\")\n    g.set_axis_labels(\"Days\", \"Bill\")\n\n\ntips.head()\n\n\n# Boxplot\nsns.axes_style('ticks')\nmy_plot = sns.boxplot(data = tips, x = \"day\", y = \"total_bill\", hue = \"sex\")\n\n\n# Chuyển legend lên trên figure\nmy_plot.legend(loc='upper center', ncol = 2, bbox_to_anchor=(0.5, 1.1))\n\n\nmy_plot.get_figure()\n\n\n\n8.6.2 Barplot\n\nsns.factorplot(\"day\", data = tips, kind = \"count\")"
  },
  {
    "objectID": "p01-09-seaborn.html#tùy-chỉnh-các-thành-phần",
    "href": "p01-09-seaborn.html#tùy-chỉnh-các-thành-phần",
    "title": "8  Seaborn vizualization",
    "section": "8.7 Tùy chỉnh các thành phần",
    "text": "8.7 Tùy chỉnh các thành phần\n\nsns.set_style('ticks')\np = sns.stripplot(\"sepal_length\", \"sepal_width\", hue = \"species\", data = iris)\n# Add title, name\np.set(xlabel = \"X\", ylabel = \"Y\", title = \"My chart\")\n# Scale y\np.set_yscale('log')\n# Loại bỏ trục trên\nsns.despine()\n# Legend\nplt.legend(loc = \"lower center\",\n          frameon = True, # Giữ frame\n          ncol= 3)\n# Lưu thành object\np_chart = p.get_figure()\n\n\np_chart.savefig('chart.png', dpi = 400)"
  },
  {
    "objectID": "p01-09-seaborn.html#lưu-ý-khác",
    "href": "p01-09-seaborn.html#lưu-ý-khác",
    "title": "8  Seaborn vizualization",
    "section": "8.8 Lưu ý khác",
    "text": "8.8 Lưu ý khác\nLưu ý: seaborn không áp dụng chain method một cách đơn giản giống pandas được\n\nwith sns.axes_style(\"ticks\"):\n    p = sns.boxplot(\"sex\", \"total_bill\", hue = \"smoker\", data = tips)\n    # Thêm title\n    # Điều chỉnh tên trục\n    p.set(xlabel = \"Gender\", ylabel = \"Amount\", title = \"My chart\")\n    sns.despine()\n    p.legend(loc = 'upper center', ncol = 2, bbox_to_anchor = (0.5, 1.02))\n    #plt.savefig(\"seaborn_chart.png\")\n    boxplot = p.get_figure()\n\nLưu lại biểu đồ\nboxplot.savefig(\"boxplot.png\")\n\n8.8.0.1 Chia facet\nTương tự như matplotlib, seaborn cần được sử dụng kèm với map để chia thành hệ thống facet\n\nimport matplotlib.pyplot as plt\ng=sns.FacetGrid(data=tips,col='sex')\ng.map(sns.regplot,'total_bill','tip')"
  },
  {
    "objectID": "p01-09-seaborn.html#tài-liệu-tham-khảo",
    "href": "p01-09-seaborn.html#tài-liệu-tham-khảo",
    "title": "8  Seaborn vizualization",
    "section": "8.9 Tài liệu tham khảo",
    "text": "8.9 Tài liệu tham khảo\n\nhttps://seaborn.pydata.org/tutorial.html"
  },
  {
    "objectID": "p01-13-lam-viec-voi-files.html#liệt-kê-các-file-theo-định-dạng",
    "href": "p01-13-lam-viec-voi-files.html#liệt-kê-các-file-theo-định-dạng",
    "title": "9  Làm việc với các file trong máy tính",
    "section": "9.1 Liệt kê các file theo định dạng",
    "text": "9.1 Liệt kê các file theo định dạng\n\nfile_name = []\nfor extension in ['*.png', '*.py']:\n    file_name = file_name + glob.glob(extension)\nfile_name"
  },
  {
    "objectID": "p01-13-lam-viec-voi-files.html#chèn-thêm-prefix-vào-tất-cả-file_name",
    "href": "p01-13-lam-viec-voi-files.html#chèn-thêm-prefix-vào-tất-cả-file_name",
    "title": "9  Làm việc với các file trong máy tính",
    "section": "9.2 Chèn thêm prefix vào tất cả file_name",
    "text": "9.2 Chèn thêm prefix vào tất cả file_name\n\ndef change_name(file_extension=['*.PNG', '*.JPG', '*.JPEG'], prefix='test'):\n    \"\"\"\n    Function to add a prefix in name of files within a folder. It will help organizing files better, \n    especially Images for markdown files without changing much in source code.\n    \"\"\"\n    import re, glob, os\n    import numpy as np\n    file_name_full = []\n    for ext in file_extension:\n        file_name_full = file_name_full + glob.glob(ext)\n    file_name = []\n    extension = []\n    for file in file_name_full:\n        file_name = file_name + [os.path.splitext(file)[0]]\n        extension = extension + [os.path.splitext(file)[1]]\n    extension = np.array(extension)\n    file_name = np.array(file_name)\n    # New name, adding prefix\n    new_name = [prefix + str(file) + str(ext) for file, ext in zip(file_name, extension)]\n    print(new_name)\n    # Rename\n#    [os.rename(old_name, new_name) for old_name, new_name in zip(file_name_full, new_name)]\n\n\nchange_name(prefix = \"hello-\")"
  },
  {
    "objectID": "p01-13-lam-viec-voi-files.html#rename-1-file",
    "href": "p01-13-lam-viec-voi-files.html#rename-1-file",
    "title": "9  Làm việc với các file trong máy tính",
    "section": "9.3 Rename 1 file",
    "text": "9.3 Rename 1 file\n[os.rename(old_name, new_name) for old_name, new_name in zip(file_name_full, new_name)]"
  },
  {
    "objectID": "p01-13-lam-viec-voi-files.html#mở-1-file-text-thay-đổi-và-save",
    "href": "p01-13-lam-viec-voi-files.html#mở-1-file-text-thay-đổi-và-save",
    "title": "9  Làm việc với các file trong máy tính",
    "section": "9.4 Mở 1 file text, thay đổi và save",
    "text": "9.4 Mở 1 file text, thay đổi và save\nfile = \"my_file.txt\"\nimport re\nwith open(file, encoding=\"utf8\") as f:\n    s = f.read() # Read content của file f, lưu thành s\n    s = s.strip() # Remove khoảng trắng đầu và cuối\nwith open(file,'w', encoding=\"utf8\") as f:\n    f.write(s)  # Ghi nội dung của file f dưới dạng s"
  },
  {
    "objectID": "p01-19-so-sanh-python-r.html",
    "href": "p01-19-so-sanh-python-r.html",
    "title": "10  So sánh R với Python cơ bản",
    "section": "",
    "text": "10.0.1 Câu lệnh cơ bản\n\n\n\n\n\n\n\n\n\nHàm\nPython\nR (reference)\nNote\n\n\n\n\nInstall packages\nconda install x\ninstall.packages(“x”)\n\n\n\nLoad package\nimport library as x\nlibrary(x)\n\n\n\nKiểm tra thư mục làm việc\nimport os as os  os.getcwd()\ngetwd()\nCurrent directory\n\n\nĐổi thư mục làm việc\nos.chdir\nsetwd()\nChange directory\n\n\nLiệt kê các file trong thư mục\nos.listdr()\ndir()\nlist directory\n\n\nLiệt kê các life trong environment\nglobals()\nls()\n\n\n\nXóa object\ndel(object)\nrm(object)\n\n\n\n\n\n\n10.0.2 Làm việc với data frame cơ bản\n\n\n\n\n\n\n\n\n\nHàm\nPython\nR (reference)\nNote\n\n\n\n\nTên hàng\ndf.index\nrownames(df)\n\n\n\nTên cột\ndf.columns\ncolnames(df\n\n\n\nHead\ndf.head(3)\nhead(df, 3)\n\n\n\nTail\ndf.tail(3)\ntail(df, 3)\n\n\n\nDim\ndf.shape\ndim(df)\ndf.shape() không chạy do shape không phải  hàm mà là thuộc tính\n\n\nSummary\ndf.describe()\nsummary(df)\n\n\n\nĐổi tên\ndf.columns = [\"P\", \"Q\"]\nnames(df) = c(“P”, “Q”)"
  },
  {
    "objectID": "p01-99-tricks-python.html#debug",
    "href": "p01-99-tricks-python.html#debug",
    "title": "11  Các mẹo trong Python",
    "section": "11.1 Debug",
    "text": "11.1 Debug\nSử dụng %xmode hoặc %debug để tìm lỗi. Xem ví dụ dưới đây\n\ndef func_1(a,b):\n    return(a/b)\n\n\nfunc_1(8,3)\n\n\nfunc_1(7,0)\n\nSử dụng %xmode cho phép hiển thị thêm các thông tin lỗi\n\n%xmode Verbose\n\n\nfunc_1(8,0)"
  },
  {
    "objectID": "p01-99-tricks-python.html#kiểm-tra-thời-gian-chạy-code",
    "href": "p01-99-tricks-python.html#kiểm-tra-thời-gian-chạy-code",
    "title": "11  Các mẹo trong Python",
    "section": "11.2 Kiểm tra thời gian chạy code",
    "text": "11.2 Kiểm tra thời gian chạy code\nPython cho phép sử dụng profiling. Hai magic command hay dùng nhất là %time & %timeit. %timeit cho phép hiển thị thông tin chính xác với nhiều thông số hơn.\n\n%time sum(range(100))\n\n\n%timeit sum(range(100))"
  },
  {
    "objectID": "p01-99-tricks-python.html#profiling-với-memory",
    "href": "p01-99-tricks-python.html#profiling-với-memory",
    "title": "11  Các mẹo trong Python",
    "section": "11.3 Profiling với memory",
    "text": "11.3 Profiling với memory\ncài đặt memory_profiler trên với anaconda prompt\npip install memory_profiler\n\n%load_ext memory_profiler\n\n\ndef sum_of_lists(N):\n           total = 0\n           for i in range(5):\n               L = [j ^ (j &gt;&gt; i) for j in range(N)]\n               total += sum(L)\n           return total\n\n\n%memit sum_of_lists(10000)\n\n\nsum_of_lists(10000)"
  },
  {
    "objectID": "p01-99-tricks-python.html#phân-biệt-các-dấu-gạch-dưới-trong-python",
    "href": "p01-99-tricks-python.html#phân-biệt-các-dấu-gạch-dưới-trong-python",
    "title": "11  Các mẹo trong Python",
    "section": "11.4 Phân biệt các dấu gạch dưới trong Python",
    "text": "11.4 Phân biệt các dấu gạch dưới trong Python\nDâu gạch dưới _ có nhiều ý nghĩa khác nhau trong Python và có nhiều cách sử dụng như sau\n\n11.4.1 Lưu giá trị từ trước\nCách này chỉ sử dụng với Ipython\n\nx = 10\n\n\n_\n\n\n\n11.4.2 Bỏ qua giá trị không cần thiết\n\na,_, c = (1, 2, 3)\n\n\na\n\n\nc\n\n\n# Ignore nhiều giá trị\na, *_, b = (1,2,3,4,5,6,7)\nprint(a); print(b)\n\n\n\n11.4.3 Sử dụng trong loop\n\nfor _ in range(5):\n    print(_)\n\n\nlanguages = ['R', 'Python', 'Scala']\nfor _ in languages:\n    print(_)\n\n\n\n11.4.4 Phân cách hàng nghìn\n\nx = 1_000_000\nprint(x)\n\n\n\n11.4.5 Đặt tên có chứa _\nTrong Python, có 4 cách đặt tên chứa _: - Một dấu đằng trước: _name - Một dấu đằng sau: name_ - Hai dấu đằng trước: __name - Hai dấu ở hai bên: __name__\n\n11.4.5.1 Một dấu đằng trước\nCho phép bỏ qua hàm khi import\n\n# Tạo file my_functions.py \n\n\n## filename: my_functions.py\n## Ví dụ để hiểu rõ chức năng của dấu gạch dưới trong python\n\ndef func():\n    return \"Anh Hoang Duc\"\n\ndef _private_func():\n    return 7\n\n\nfrom my_functions import *\n\n\nfunc()\n\n\n_private_func()\n\nTrong cách import trên, hàm _private_func đã không được import vào trong môi trường làm việc. Ta có thể import vào môi trường làm việc như sau\n\nimport my_functions\n\n\nmy_functions.func()\n\n\nmy_functions._private_func()\n\n\n\n11.4.5.2 Gạch dưới cuối tên\nSử dụng khi dùng làm keyword\n\ndef function(class):\n    return print(class)\n\n\ndef function(class_):\n    return print(class_)\n\n\nfunction(9)\n\n\n\n11.4.5.3 Hai gạch dưới đầu tên"
  },
  {
    "objectID": "p01-99-tricks-python.html#list-object-trong-môi-trường-làm-việc",
    "href": "p01-99-tricks-python.html#list-object-trong-môi-trường-làm-việc",
    "title": "11  Các mẹo trong Python",
    "section": "11.5 List object trong môi trường làm việc",
    "text": "11.5 List object trong môi trường làm việc\nHiển thị tất cả các biến trong môi trường: sử dụng %whos\n\nx, y = 7, 'test' \n\n\n%whos\n\nSử dụng %who_ls data_type\n\nimport pandas as pd\ndf = pd.DataFrame({'x' : [1,2,3]})\nx = [1,2,3]\n\n\n%who_ls DataFrame\n\n\n%who_ls list\n\n\n%who_ls DataFrame list"
  },
  {
    "objectID": "p01-99-tricks-python.html#hiển-thị-nhiều-kết-quả-trong-1-cell",
    "href": "p01-99-tricks-python.html#hiển-thị-nhiều-kết-quả-trong-1-cell",
    "title": "11  Các mẹo trong Python",
    "section": "11.6 Hiển thị nhiều kết quả trong 1 cell",
    "text": "11.6 Hiển thị nhiều kết quả trong 1 cell\nTrong jupyter notebook, kết quả trong 1 cell chỉ được hiển thị 1 lần. ta có thể khắc phục như sau\n\nfrom IPython.core.interactiveshell import InteractiveShell\nInteractiveShell.ast_node_interactivity = \"all\"\n\n\nx, y = 7, 8\n\n\nx\ny\nx * y"
  },
  {
    "objectID": "p01-99-tricks-python.html#assign-string-thành-object",
    "href": "p01-99-tricks-python.html#assign-string-thành-object",
    "title": "11  Các mẹo trong Python",
    "section": "11.7 Assign string thành object",
    "text": "11.7 Assign string thành object\nProblem: Tạo cùng lúc nhiều object, gán mỗi object với 1 giá trị\n\nimport numpy as np\ndf_name = [\"df1\", \"df2\", \"df3\"]\n\n\nfor i in df_name:\n    globals()[i] = np.random.random(1)\n    print(i)\n    print(eval(i))\n\n\nfor i in df_name:\n    del globals()[i]"
  },
  {
    "objectID": "p01-99-tricks-python.html#evaluation",
    "href": "p01-99-tricks-python.html#evaluation",
    "title": "11  Các mẹo trong Python",
    "section": "11.8 Evaluation",
    "text": "11.8 Evaluation\nTương tự như R, Python có thể sử dụng evaluation để thực hiện lập trình\n\nmy_df = 7\n\n\neval('my_df')"
  },
  {
    "objectID": "p01-99-tricks-python.html#xóa-toàn-bộ-environment",
    "href": "p01-99-tricks-python.html#xóa-toàn-bộ-environment",
    "title": "11  Các mẹo trong Python",
    "section": "11.9 Xóa toàn bộ environment",
    "text": "11.9 Xóa toàn bộ environment\n\n# Xóa dataframe\nall_var = %who_ls DataFrame\n\n\nfor i in all_var:\n    print(globals()[i])\n\n\nfor _ in all_var:\n    del globals()[_]\n\n\n%who_ls\n\n\n# Delete all\n%reset -f\n\n\n%who_ls"
  },
  {
    "objectID": "p01-99-tricks-python.html#lưu-code-từ-cell-thành-file",
    "href": "p01-99-tricks-python.html#lưu-code-từ-cell-thành-file",
    "title": "11  Các mẹo trong Python",
    "section": "11.10 Lưu code từ cell thành file",
    "text": "11.10 Lưu code từ cell thành file\nSử dụng magic command %%writefile\n%%writefile 09.test_script/03_test_script.py\ndef joke():\n    print('My job')"
  },
  {
    "objectID": "p01-99-tricks-python.html#mở-một-loạt-file-text-và-sửa-nội-dung",
    "href": "p01-99-tricks-python.html#mở-một-loạt-file-text-và-sửa-nội-dung",
    "title": "11  Các mẹo trong Python",
    "section": "11.11 Mở một loạt file text và sửa nội dung",
    "text": "11.11 Mở một loạt file text và sửa nội dung\ndef replace_md(file, find, replace):\n    with open(file, encoding=\"utf8\") as f:\n        s = f.read()\n        s = s.replace(find, replace)\n    with open(file,'w', encoding=\"utf8\") as f:\n        f.write(s)\n\nimport glob, os\nos.chdir(\"../_book\")\nfor file in glob.glob(\"*.md\"):\n    replace_md(file = file, find = '&lt;img src=\"', replace = '![](')\n    replace_md(file = file, find = '\" width=\"672\" /&gt;', replace = ')\\n\\n')"
  },
  {
    "objectID": "p01-99-tricks-python.html#chạy-file-python-từ-bat",
    "href": "p01-99-tricks-python.html#chạy-file-python-từ-bat",
    "title": "11  Các mẹo trong Python",
    "section": "11.12 Chạy file python từ bat",
    "text": "11.12 Chạy file python từ bat\npython script.py"
  },
  {
    "objectID": "p02-01-sklearn.html#giới-thiệu-cơ-bản",
    "href": "p02-01-sklearn.html#giới-thiệu-cơ-bản",
    "title": "12  Giới thiệu cơ bản về Scikit learn",
    "section": "12.1 Giới thiệu cơ bản",
    "text": "12.1 Giới thiệu cơ bản\n\n12.1.1 Giới thiệu\nsklearn là một package rất mạnh trong Python cho phép làm việc với nhiều mô hình machine learning. Xây dựng mô hình dự báo trong sklearn được chuẩn hóa hơn trong R và có các đặc điểm sau.\n\nMa trận biến đầu vào (features matrix): Chỉ nhận dạng số và là dạng array 2 chiều\nMảng giá trị dự báo (target array): Chỉ nhận dạng số\n\nSo với R cho phép dữ liệu đầu vào là dataframe, đây là các khác biệt rất lớn.\nCác bước thực hiện mô hình dự báo với sklearn có thể khái quát như sau:\n\nLựa chọn mô hình dự báo\nLựa chọn tham số cho mô hình\nChia dữ liệu thành ma trận biến đầu vào và mảng giá trị dự báo\nFit mô hình với hàm fit\nÁp dụng mô hình cho dữ liệu mới với predict\n\n\n\n12.1.2 Ví dụ về regression\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nplt.style.use('seaborn')\n%matplotlib inline\nrng = np.random.RandomState(50)\nx = 10 * rng.rand(50)\ny = 2 * x - 1 + rng.randn(50)\nplt.scatter(x, y)\n\nXây dựng mô hình với sklearn\n\n# Step 1: Lựa chọn mô hình\nfrom sklearn.linear_model import LinearRegression\n# Step 2: Lựa chọn parameter, cho phép fit offset\nmodel = LinearRegression(fit_intercept = True)\nmodel\n\n\n# Step 3: Chia data thành matrix features và target array\nX = x[:, np.newaxis]\n\nLưu ý: np.newaxis cho phép tăng thêm 1 chiều của 1 array. Vì dữ liệu X đầu vào yêu cầu mảng 2 chiều, nên cần phải sử dụng np.newaxis để tăng chiều của X\n\nX.shape\n\n\nx.shape\n\n\n# Step 4: Fit model\nmodel.fit(X, y)\n\n\n# Coefficient\nmodel.coef_\n\n\n# Intercept\nmodel.intercept_\n\n\n# Step 5: Dự báo trên tập mới\nxfit = np.linspace(-1, 11)\n# Chuyển sang dạng feature matrix\nXfit = xfit[:, np.newaxis]\nyfit = model.predict(Xfit)\n\n\nplt.scatter(x,y)\nplt.plot(xfit,yfit)\n\n\n\n12.1.3 Ví dụ về bài toán phân loại\n\nfrom sklearn.datasets import load_iris\niris = load_iris()\n\n\nX = iris.data\ny = iris.target\n\n\nfrom sklearn.neighbors import KNeighborsClassifier\nmodel = KNeighborsClassifier(n_neighbors = 1)\n\n\nmodel.fit(X, y)\n\n\ny_model = model.predict(X)\n\n\n# Đánh giá accuracy\nfrom sklearn.metrics import accuracy_score\naccuracy_score(y, y_model)\n\n\n\n12.1.4 Ví dụ với train test (hold out)\nTa tiếp tục sử dụng mô hình k-nearest neighborshood nhưng sử dụng train, test\n\nfrom sklearn.model_selection import train_test_split\nX1, X2, y1, y2 = train_test_split(X, y, random_state = 0,\n                                 train_size = 0.5)\n\n\nmodel.fit(X1, y1)\n\n\ny2_model = model.predict(X2)\n\n\naccuracy_score(y2, y2_model)\n\nCross validation\n\nfrom sklearn.model_selection import cross_val_score\ncross_val_score(model, X, y, cv = 5)\n\n\n\n12.1.5 Grid search\nKhi sử dụng mô hình dự báo, ta thường sử dụng grid search khi tuning\n\n# Tạo data.frame\nimport numpy as np\ndef make_data(N, err=1.0, rseed=1):\n            # randomly sample the data\n            rng = np.random.RandomState(rseed)\n            X = rng.rand(N, 1) ** 2\n            y = 10 - 1. / (X.ravel() + 0.1)\n            if err &gt; 0:\n                y += err * rng.randn(N)\n            return X, y\nX, y = make_data(40)\n\n\n# Chọn mô hình\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.pipeline import make_pipeline\ndef PolynomialRegression(degree=2, **kwargs):\n    return make_pipeline(PolynomialFeatures(degree),\n                         LinearRegression(**kwargs))\n\n\nfrom sklearn.model_selection import GridSearchCV\nparam_grid = {'polynomialfeatures__degree': np.arange(21),\n              'linearregression__fit_intercept': [True, False],\n              'linearregression__normalize': [True, False]}\n\n\n grid = GridSearchCV(PolynomialRegression(), param_grid, cv=7)\n\n\ngrid.fit(X,y)\n\n\ngrid.best_params_\n\nTrực quan hóa kết quả mô hình\n\nmodel = grid.best_estimator_\n\n\ny_predict = model.fit(X, y).predict(X)\n\n\nplt.scatter(X.ravel(), y)\nplt.scatter(X, y_predict)\n\n\n\n12.1.6 Feature Engineering\n\n12.1.6.1 Categorical\nSử dụng onehot-encoding\n\n data = [{'price': 850000, 'rooms': 4, 'neighborhood': 'Queen Anne'},\n           {'price': 700000, 'rooms': 3, 'neighborhood': 'Fremont'},\n           {'price': 650000, 'rooms': 3, 'neighborhood': 'Wallingford'},\n           {'price': 600000, 'rooms': 2, 'neighborhood': 'Fremont'}]\n# Trước khi transform\nimport pandas as pd\npd.DataFrame(data)\n\nSử dụng onehot-encoding để biến đổi category\n\nfrom sklearn.feature_extraction import DictVectorizer\n\n\nvec = DictVectorizer(sparse = False, dtype = int)\nvec.fit_transform(data)\n\n\n\n12.1.6.2 Missing data\n\nfrom numpy import nan\nX = np.array([[ nan, 0,   3  ],\n                      [ 3,   7,   9  ],\n                      [ 3,   5,   2  ],\n                      [ 4,   nan, 6  ],\n                      [ 8,   8,   1  ]])\ny = np.array([14, 16, -1,  8, -5])\nX\n\n\nfrom sklearn.preprocessing import Imputer \n\n\nimp = Imputer(strategy = 'mean')\nX2 = imp.fit_transform(X)\nX2\n\n\nfrom sklearn.linear_model import LinearRegression\nmodel = LinearRegression().fit(X2, y)\nmodel.predict(X2)\n\n\n\n\n12.1.7 Pipeline\nĐiểm rất mạnh của Python là cho phép xây dựng pipeline khi xây dựng mô hình. Với mô hình trên, giả sử ta muốn thực hiện các bước như sau\n\nThay missing value với mean\nBiến đổi feature thành dạng bình phương\nXây mô hình hồi quy\n\n\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import PolynomialFeatures\nmodel = make_pipeline(Imputer(strategy = 'mean'),\n                      PolynomialFeatures(degree = 2),\n                      LinearRegression())\n\n\nmodel.fit(X, y)\n\n\nprint(y)\nprint(model.predict(X))"
  },
  {
    "objectID": "p02-01-sklearn.html#khái-quát-về-các-module-của-sklearn",
    "href": "p02-01-sklearn.html#khái-quát-về-các-module-của-sklearn",
    "title": "12  Giới thiệu cơ bản về Scikit learn",
    "section": "12.2 Khái quát về các module của sklearn",
    "text": "12.2 Khái quát về các module của sklearn\nTrong sklearn có các module lớn sau:\n\ndataset: Data mẫu trong mô hình\n\nload_iris\nload_wine\nload_boston\nload_breast_cancer\nload_diabetes\n\n\nNgoài ra, modules dataset còn cho phép tạo sample mẫu như sau:\n - `make_blobs`: Tạo blobs cho cluster\n - `make_regression`: Tạo dataset cho regression\n - `make_multiple_classification`: Multi class problem\n\npreprocessing: Feature Engineering data\n\nBinarizer: Bins dữ liệu thành dạng 0,1 dựa vào threshold\nKBinsDiscretizer: Bins dữ liệu\nLabelEncoder: Encode thành dạng 0..n-1\nQuantileTransformer: Chuyển dữ liệu thành dạng Quantile\nStandardScaler: Chuyển về z-score\nmaxabs_scale: Chuyển về dạng [-1.1]\nminmax_scale: Chuyển dữ liệu về bất cứ scale nào\n\ncluser: Unsupervised learning\n\nk_means\n\ndecomposiiton: Tổng hợp các phương pháp giảm biên\n\nFactorAnalysis: FA\nPCA\n\nensemble: Các phương pháp ensemble\n\nGradientBoostingClassifier\nGradientBoostingRegressor\n\nfeature_extraction: Chiết xuất biến từ images và text\n\nDictVectorizer\n\nimpute: Impute mising value\nlinear_moel: Mô hình hồi quy\n\nLinearRegression: OLS\n\nmetrics: Các chỉ số đánh giá mô hình\n\naccuracy_score\nauc\nroc_auc_score\nroc_curve\nr2_score\nmean_squared_error\n\nmodel_selection: Module hỗ trợ chia train, test, cross-validation, optimization, validation\n\ntrain_test_split\nLeaveOneOut\nStratifiedKFold\ncross_validate: Đánh giá score dựa vào cross validation\n\nneighbours: Sử dụng phương pháp nearest neighbors\nneural_network\npipeline: Module sử dụng pipeline trong machine learning\nsvm: Support Vector Machines\ntree: Decision Tree\n\nDecisionTreeClassifier\nDecisionTreeRegressor\nexport_graphviz: Export tree dưới dạng DOT"
  },
  {
    "objectID": "p02-01-sklearn.html#lưu-mô-hình-để-sử-dụng",
    "href": "p02-01-sklearn.html#lưu-mô-hình-để-sử-dụng",
    "title": "12  Giới thiệu cơ bản về Scikit learn",
    "section": "12.3 Lưu mô hình để sử dụng",
    "text": "12.3 Lưu mô hình để sử dụng\nTa có thể lưu mô hình từ sklearn để sử dụng sau với package pickle\n\nfrom sklearn.datasets import load_iris\nfrom sklearn import svm\n\n\nmodel = svm.SVC(gamma = 'scale', probability = True)\niris = load_iris()\n\nLưu ý: Đặt probability = True khi đặt class prediction để có thể dự báo điểm xác suât\n\nX, y = iris.data, iris.target\n\n\nmodel.fit(X, y)\n\n\n# Save mô hình\nimport pickle\ns = pickle.dumps(model)\n\n\nmodel_2 = pickle.loads(s)\n\n\nmodel_2.predict(X[1:100])\n\n\nmodel_2.predict_proba(X[:10])\n\nSave với joblist\n\nfrom sklearn.externals import joblib\nfile_name = \"final_model.sav\"\njoblib.dump(model, file_name)\n\n\nloaded_model = joblib.load('final_model.sav')\n\n\nloaded_model.predict(X[:150])"
  },
  {
    "objectID": "p02-01-sklearn.html#tài-liệu-tham-khảo",
    "href": "p02-01-sklearn.html#tài-liệu-tham-khảo",
    "title": "12  Giới thiệu cơ bản về Scikit learn",
    "section": "12.4 Tài liệu tham khảo",
    "text": "12.4 Tài liệu tham khảo\nhttps://scikit-learn.org/stable/modules/classes.html"
  },
  {
    "objectID": "p02-02-sklearn-advanced.html#feature-engineering",
    "href": "p02-02-sklearn-advanced.html#feature-engineering",
    "title": "13  sklearn nâng cao",
    "section": "13.1 Feature engineering",
    "text": "13.1 Feature engineering\nFeature engineering là quá trình biến đối dữ liệu thô thành các dữ liệu phái sinh (features) có thể thể hiện tốt hơn vấn đề cần giải quyết trong mô hình dự báo, từ đó gia tăng độ chính xác của mô hình trên tập dữ liệu mới.\nFeature engineering có 4 nhóm lớn: - Dữ liệu dạng số - Dữ liệu dạng category - Dữ liệu text - Dữ liệu dạng ảnh\n\n13.1.1 Dữ liệu dạng số\n\n13.1.1.1 Chuyển sang dạng nhị phân (0,1)\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.preprocessing import Binarizer\n\n\niris = pd.read_csv(\"./99_dataset/iris.csv\")\niris.head()\n\n\n# Tạo object binarizer\nthre = np.mean(iris['sepal_length'])\nbn = Binarizer(threshold = thre)\n\n\nnew_sepal = bn.fit_transform([iris['sepal_length']])\ntype(new_sepal)\n\n\niris['new_sepal'] = new_sepal[0] # Chuyển sang dạng array 1 chiều\n\n\niris.tail()\n\n\n\n13.1.1.2 Binning\nBinning trong KBinsDiscretizer có 3 cách chính:\n\nuniforms: Chía thành n phần có độ rộng bằng nhau \\(\\frac{x_{max} - x_{min}}{n_{bins}}\\)\nquantile: Chia them n quantile\nkmeans: Chia theo tâm gần nhất sử dụng k-means\n\n\nfrom sklearn.preprocessing import KBinsDiscretizer\n\n\nimport sklearn \nsklearn.__version__\n\nLưu ý: - Cần check version của sklearn khi không sử dụng KBinsDiscretizer được - Khi làm việc với array\n\niris['sepal_length'].values\n\n\nX = iris.iloc[:, np.arange(4)].values\n\n\nX[:, 1].reshape(150,1)[:5]\n\n\nest = KBinsDiscretizer(n_bins = 5,  # Số lượng bins\n                       encode = \"ordinal\",  # Chia theo ordinal\n                       strategy = \"uniform\") # Chuyển thành dạng integer\n# est.fit(X)\nsepal_length_new = est.fit_transform(X[:, 1].reshape(150, 1))\n\n\nnp.max(sepal_length_new)\n\n\n\n13.1.1.3 Standardization\nBiến đổi dữ liệu về dạng normal distribution\n\nfrom sklearn.preprocessing import StandardScaler\n\n\nX = np.random.randint(1, 10, 1000).reshape(1000,1)\n\n\nscaler = StandardScaler()\n\n\nsns.distplot(X)\n\n\nnew_x = scaler.fit_transform(X)\n\n\nsns.distplot(new_x)\n\nLưu ý: Với các nhóm hàm biến đổi dữ liệu trước khi vào mô hình, frame work bao giờ cũng như sau:\n\nTạo object để transform transfrom_object\nÁp dụng hàm fit với object X\nApply transform_object vào object mới Y\n\nTrong trường hợp áp dụng thẳng fit và transform object X, ta có thể dùng hàm fit_transform\n\nfrom sklearn.datasets import load_iris\niris_ml = load_iris()\n\n\nfrom sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(iris_ml.data, iris_ml.target, random_state = 0)\ntrain_row = x_train.shape[0]\ntest_row = x_test.shape[0]\n\n\nfrom sklearn.preprocessing import StandardScaler\nscl = StandardScaler().fit(x_train[:,1].reshape(train_row, 1))\n\n\nnew_var = scl.transform(x_test[:, 1].reshape(test_row, 1))\n\nSo sánh distribution của hai nhóm\n\n# Oldvar\nsns.distplot(x_test[:, 1])\n\n\n# New var\ntype(new_var)\n\n\nsns.distplot(new_var)\n\n\n\n\n13.1.2 Normalization\nNormalization biến đổi dữ liệu trong khoảng [0, 1]\n\nfrom sklearn.preprocessing import Normalizer\nnorm = Normalizer().fit(x_train)\n\n\nnew_var = norm.transform(x_test)\n\n\n#Old var\nsns.distplot(x_test[:, 1])\n\n\n# New var\nsns.distplot(new_var[:, 1])\n\n\nnew_var[:5]\n\n\n\n13.1.3 Tạo hàm bậc cao\n\nfrom sklearn.preprocessing import PolynomialFeatures\nresult = PolynomialFeatures(5).fit_transform(x_train)\n\n\n# New var\nsns.distplot(result[:, 1])\n\n\n# Old var\nsns.distplot(x_train[:, 1])\n\n\n\n13.1.4 MinMax scaler\n\nfrom sklearn.preprocessing import MinMaxScaler\nresult = MinMaxScaler().fit_transform(x_train)\n\n\nsns.distplot(result[:, 1])\n\n\nsns.distplot(x_train[:, 1])\n\n\n\n13.1.5 Robust scaling\nTương tự như StandardScaler, nhưng Robust Scaling sẽ thay mean bằng median\n\nfrom sklearn.preprocessing import RobustScaler\nresult = RobustScaler().fit_transform(x_train)\n\n\nsns.distplot(result[:, 1])"
  },
  {
    "objectID": "p02-02-sklearn-advanced.html#biến-category",
    "href": "p02-02-sklearn-advanced.html#biến-category",
    "title": "13  sklearn nâng cao",
    "section": "13.2 Biến category",
    "text": "13.2 Biến category\n\n13.2.1 Onehot encoding\n\ncat_var = np.array(['a', 'a', 'b', 'c', 'b'])\ncat_var.reshape(5, 1)\n\n\nfrom sklearn.preprocessing import LabelEncoder\nonehot = LabelEncoder()\nonehot.fit_transform(cat_var)"
  },
  {
    "objectID": "p02-02-sklearn-advanced.html#chọn-mô-hình-phân-tích-kết-quả",
    "href": "p02-02-sklearn-advanced.html#chọn-mô-hình-phân-tích-kết-quả",
    "title": "13  sklearn nâng cao",
    "section": "13.3 Chọn mô hình & phân tích kết quả",
    "text": "13.3 Chọn mô hình & phân tích kết quả\n\nfrom sklearn.datasets import load_breast_cancer\nbreast = load_breast_cancer()\n\n\nfrom sklearn.model_selection import train_test_split\n\n\nx_train, x_test, y_train, y_test = train_test_split(breast.data, breast.target, test_size = 0.3, random_state = 0)\n\n\nfrom xgboost import XGBClassifier\n\n\nxgb_model = XGBClassifier(probabbility = True)\n\n\nxgb_model.fit(x_train, y_train)\n\n\nxgb_model.predict(x_test)\n\n\n# Dự báo xác suất\npred_prob = xgb_model.predict_proba(x_test)\npred_class = xgb_model.predict(x_test)\nprint(pred_prob[:5]); print(pred_class[:5])\n\n\nfrom sklearn.metrics import *\n\n\naccuracy_score(y_test, pred_class)\n\n\nconfusion_matrix(y_test, pred_class)\n\n\nprint(classification_report(y_test, pred_class))\n\n\nroc_auc_score(y_test, pred_prob[:, 1])\n\nroc_curve cho phép trả ra kết quả FPR & TPR và threshold\n\nfpr, tpr, threshold = roc_curve(y_test, pred_prob[:, 1])\n\n\nsns.lineplot(fpr, tpr, marker = True)"
  },
  {
    "objectID": "p02-02-sklearn-advanced.html#grid-search",
    "href": "p02-02-sklearn-advanced.html#grid-search",
    "title": "13  sklearn nâng cao",
    "section": "13.4 Grid search",
    "text": "13.4 Grid search\n\nxgb_model = XGBClassifier()\nfrom sklearn.model_selection import GridSearchCV\n\n\nparams = {\"max_depth\" : [3,4,5],\n         \"sample_rate\" : [0.6, 0.7],\n         \"colsample_bytree\" : [0.6, 0.8]}\n\n\ngrid = GridSearchCV(estimator = xgb_model,\n                   param_grid = params,\n                   scoring = \"roc_auc\",\n                   cv = 5) # Số lượng cross-validation\n\n\ngrid.fit(x_train, y_train)\n\n\ngrid.best_score_\n\n\ngrid.best_params_"
  },
  {
    "objectID": "p02-03-xgboost.html#ví-dụ-đơn-giản",
    "href": "p02-03-xgboost.html#ví-dụ-đơn-giản",
    "title": "14  Xgboost với sklearn",
    "section": "14.1 Ví dụ đơn giản",
    "text": "14.1 Ví dụ đơn giản\n\nfrom xgboost import XGBClassifier\nfrom sklearn.datasets import load_iris\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import auc\nimport pandas as pd\n\n\niris = load_iris()\n\n\niris_df = pd.DataFrame(iris.data, columns = iris.feature_names)\niris_df.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 150 entries, 0 to 149\nData columns (total 4 columns):\n #   Column             Non-Null Count  Dtype  \n---  ------             --------------  -----  \n 0   sepal length (cm)  150 non-null    float64\n 1   sepal width (cm)   150 non-null    float64\n 2   petal length (cm)  150 non-null    float64\n 3   petal width (cm)   150 non-null    float64\ndtypes: float64(4)\nmemory usage: 4.8 KB\n\n\n\niris_df.describe()\n\n\n\n\n\n\n\n\nsepal length (cm)\nsepal width (cm)\npetal length (cm)\npetal width (cm)\n\n\n\n\ncount\n150.000000\n150.000000\n150.000000\n150.000000\n\n\nmean\n5.843333\n3.057333\n3.758000\n1.199333\n\n\nstd\n0.828066\n0.435866\n1.765298\n0.762238\n\n\nmin\n4.300000\n2.000000\n1.000000\n0.100000\n\n\n25%\n5.100000\n2.800000\n1.600000\n0.300000\n\n\n50%\n5.800000\n3.000000\n4.350000\n1.300000\n\n\n75%\n6.400000\n3.300000\n5.100000\n1.800000\n\n\nmax\n7.900000\n4.400000\n6.900000\n2.500000\n\n\n\n\n\n\n\n\n# Chia train test\nx_train, x_test, y_train, y_test = train_test_split(iris.data, iris.target, \n                                                             train_size = 0.7, random_state = 3)\n\n\nmodel = XGBClassifier(probabbility = True)\n\n\nmodel.fit(x_train, y_train)\n\n[08:20:34] WARNING: C:\\Users\\dev-admin\\croot2\\xgboost-split_1675461376218\\work\\src\\learner.cc:767: \nParameters: { \"probabbility\" } are not used.\n\n\n\nXGBClassifier(base_score=None, booster=None, callbacks=None,\n              colsample_bylevel=None, colsample_bynode=None,\n              colsample_bytree=None, early_stopping_rounds=None,\n              enable_categorical=False, eval_metric=None, feature_types=None,\n              gamma=None, gpu_id=None, grow_policy=None, importance_type=None,\n              interaction_constraints=None, learning_rate=None, max_bin=None,\n              max_cat_threshold=None, max_cat_to_onehot=None,\n              max_delta_step=None, max_depth=None, max_leaves=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              objective='multi:softprob', predictor=None, ...)In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.XGBClassifierXGBClassifier(base_score=None, booster=None, callbacks=None,\n              colsample_bylevel=None, colsample_bynode=None,\n              colsample_bytree=None, early_stopping_rounds=None,\n              enable_categorical=False, eval_metric=None, feature_types=None,\n              gamma=None, gpu_id=None, grow_policy=None, importance_type=None,\n              interaction_constraints=None, learning_rate=None, max_bin=None,\n              max_cat_threshold=None, max_cat_to_onehot=None,\n              max_delta_step=None, max_depth=None, max_leaves=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              objective='multi:softprob', predictor=None, ...)\n\n\n\nmodel.predict(x_test)\n\narray([0, 0, 0, 0, 0, 2, 1, 0, 2, 1, 1, 0, 1, 1, 2, 0, 1, 2, 2, 0, 2, 2,\n       2, 1, 0, 2, 2, 1, 1, 1, 0, 0, 2, 1, 0, 0, 2, 0, 2, 1, 2, 1, 0, 0,\n       2], dtype=int64)\n\n\n\nprint(\"Accurarcy score is: \", round(accuracy_score(model.predict(x_test), y_test),2))\n\nAccurarcy score is:  0.98\n\n\n\nmodel.predict_proba(x_test)\n\narray([[9.9402547e-01, 4.9419315e-03, 1.0325337e-03],\n       [9.9402547e-01, 4.9419315e-03, 1.0325337e-03],\n       [9.9402547e-01, 4.9419315e-03, 1.0325337e-03],\n       [9.9388760e-01, 4.4173365e-03, 1.6950306e-03],\n       [9.8956633e-01, 9.4058244e-03, 1.0279018e-03],\n       [4.4694380e-04, 1.5363063e-03, 9.9801672e-01],\n       [6.1949715e-03, 9.9112600e-01, 2.6790327e-03],\n       [9.9402547e-01, 4.9419315e-03, 1.0325337e-03],\n       [2.6352119e-04, 5.4764684e-04, 9.9918884e-01],\n       [6.7262668e-03, 9.8970383e-01, 3.5698516e-03],\n       [7.0659597e-03, 9.9056870e-01, 2.3653810e-03],\n       [9.9388760e-01, 4.4173365e-03, 1.6950306e-03],\n       [2.5709060e-03, 9.9631727e-01, 1.1117954e-03],\n       [6.1949715e-03, 9.9112600e-01, 2.6790327e-03],\n       [3.2568051e-04, 6.6401513e-04, 9.9901032e-01],\n       [9.9402547e-01, 4.9419315e-03, 1.0325337e-03],\n       [3.3030577e-03, 9.7564769e-01, 2.1049296e-02],\n       [2.6355544e-04, 4.1776375e-04, 9.9931872e-01],\n       [7.4486982e-04, 3.3494956e-03, 9.9590564e-01],\n       [9.9402547e-01, 4.9419315e-03, 1.0325337e-03],\n       [3.3660464e-03, 1.5581506e-01, 8.4081888e-01],\n       [2.6355544e-04, 4.1776375e-04, 9.9931872e-01],\n       [3.2556566e-04, 1.0164132e-03, 9.9865806e-01],\n       [5.7217036e-03, 9.8674923e-01, 7.5289891e-03],\n       [9.9402547e-01, 4.9419315e-03, 1.0325337e-03],\n       [5.3179194e-04, 1.4435668e-03, 9.9802470e-01],\n       [1.4609009e-02, 1.6550653e-01, 8.1988442e-01],\n       [2.5713898e-03, 9.9650478e-01, 9.2382537e-04],\n       [1.2468877e-02, 9.8213899e-01, 5.3922036e-03],\n       [6.7262668e-03, 9.8970383e-01, 3.5698516e-03],\n       [9.8956633e-01, 9.4058244e-03, 1.0279018e-03],\n       [9.9402547e-01, 4.9419315e-03, 1.0325337e-03],\n       [3.2568051e-04, 6.6401513e-04, 9.9901032e-01],\n       [5.7362928e-03, 9.8926520e-01, 4.9985140e-03],\n       [9.9283159e-01, 5.4751458e-03, 1.6932297e-03],\n       [9.9402547e-01, 4.9419315e-03, 1.0325337e-03],\n       [1.8599266e-04, 4.5144049e-04, 9.9936253e-01],\n       [9.8858148e-01, 9.2404950e-03, 2.1780173e-03],\n       [4.4694380e-04, 1.5363063e-03, 9.9801672e-01],\n       [3.2736855e-03, 9.9314100e-01, 3.5853561e-03],\n       [2.4555452e-04, 5.1030872e-04, 9.9924421e-01],\n       [2.5713898e-03, 9.9650478e-01, 9.2382537e-04],\n       [9.9402547e-01, 4.9419315e-03, 1.0325337e-03],\n       [9.9402547e-01, 4.9419315e-03, 1.0325337e-03],\n       [1.1248903e-03, 1.3940812e-02, 9.8493433e-01]], dtype=float32)"
  },
  {
    "objectID": "p02-07-machine-learning-h2o.html#giới-thiệu",
    "href": "p02-07-machine-learning-h2o.html#giới-thiệu",
    "title": "15  Machine learning với H2O",
    "section": "15.1 Giới thiệu",
    "text": "15.1 Giới thiệu\nTương tự như R, H2O phát triển module máy học trên python. Từ h2o version 3.26.0.7, H2O cho phép upload ngược lại MOJO object để có thể sử dụng trong mô hình.\npip install h2o\n\nimport h2o\n\n\nh2o.init(nthreads = -1, max_mem_size = 4)\n\n\nairlines_data = h2o.import_file(\"./99_dataset/allyears2k.csv\")\n\n\nairlines_data.head()\n\n\n## Create a GBM model, only to later export it as a MOJO\nfrom h2o.estimators import H2OGradientBoostingEstimator\noriginal_model = H2OGradientBoostingEstimator(ntrees = 1)\noriginal_model.train(x = [\"Origin\", \"Dest\"], y = \"IsDepDelayed\", training_frame=airlines_data)\n\n\noriginal_model.accuracy\n\n\nimport pandas as pd\n\n\n# Convert sang H2o Frame\ntest_data = pd.DataFrame({'Origin': ['SAN'], 'Dest': ['SFO']})\ntest_data_h2o = h2o.H2OFrame(test_data)\n\n\n# Dự báo\noriginal_model.predict(test_data_h2o)\n\nCách download file MOJO\n\noriginal_model_filename = original_model.download_mojo(path=\"../datasets/model/\", get_genmodel_jar=True)\n\n\noriginal_model_filename\n\n\n# Upload mojo back\nmojo_model = h2o.upload_mojo(original_model_filename)\n\n\nresult = mojo_model.predict(airlines_data.head())\n\n\n# Convert từ H2oFrame sang DataFrame\ntype(h2o.as_list(result))\n\nLưu ý:\n\nMô hình MOJO có thể load ngược lại vào R và sử dụng cho production"
  },
  {
    "objectID": "p02-07-machine-learning-h2o.html#tài-liệu-tham-khảo",
    "href": "p02-07-machine-learning-h2o.html#tài-liệu-tham-khảo",
    "title": "15  Machine learning với H2O",
    "section": "15.2 Tài liệu tham khảo",
    "text": "15.2 Tài liệu tham khảo\n\nhttp://docs.h2o.ai/h2o-tutorials/latest-stable/"
  },
  {
    "objectID": "p02-20-api-flask.html#xây-dựng-mô-hình",
    "href": "p02-20-api-flask.html#xây-dựng-mô-hình",
    "title": "16  Xây dựng API dự báo với Flask",
    "section": "16.1 Xây dựng mô hình",
    "text": "16.1 Xây dựng mô hình\n# Load library\nfrom sklearn import svm, datasets\nimport pickle \nimport numpy as np\n\n# Load Sample data\niris = datasets.load_iris()\n\n# Split loaded data into independent and target features\nX = iris.data  \ny = iris.target\n\n# Tạo mô hình SVM \nsvmModel = svm.SVC(kernel='poly', degree=3, C=1.0).fit(X, y)\n\n# Lưu lại mô hình\nfrom sklearn.externals import joblib\nfile_name = \"SVMModel.sav\"\njoblib.dump(svmModel, file_name)"
  },
  {
    "objectID": "p02-20-api-flask.html#tạo-flask-object",
    "href": "p02-20-api-flask.html#tạo-flask-object",
    "title": "16  Xây dựng API dự báo với Flask",
    "section": "16.2 Tạo Flask object",
    "text": "16.2 Tạo Flask object\n# import Flask class from the flask module\nfrom flask import Flask, request\n\nimport numpy as np\nimport pickle\nfrom sklearn.externals import joblib\n\n# Create Flask object to run\napp = Flask(__name__)\n\n@app.route('/')\ndef home():\n    return \"Dự báo iris!!\"\n\n@app.route('/predict')\ndef predict():\n\n    # Tạo variable từ request\n    sepLen = request.args['sepal_length']\n    sepWid = request.args['sepal_width']\n    petLen = request.args['petal_length']\n    petWid = request.args['petal_width']\n    \n    testData = np.array([sepLen, sepWid, petLen, petWid]).reshape(1,4)\n    class_prediced = int(svmIrisModel.predict(testData)[0])\n    output = \"Predicted Iris Class: \" + str(class_prediced)\n    \n    return (output)\n    \n# Load model đã train\n# Model chỉ được load lần đầu\ndef load_model():\n    global svmIrisModel\n    \n    svmIrisModel = joblib.load('SVMModel.sav')\n\nif __name__ == \"__main__\":\n    print(\"**Starting Server...\")\n    \n    # Call function that loads Model\n    load_model()\n    \n    # Run Server\n    app.run()"
  },
  {
    "objectID": "p02-20-api-flask.html#dùng-mô-hình-dự-báo-realtime",
    "href": "p02-20-api-flask.html#dùng-mô-hình-dự-báo-realtime",
    "title": "16  Xây dựng API dự báo với Flask",
    "section": "16.3 Dùng mô hình dự báo realtime",
    "text": "16.3 Dùng mô hình dự báo realtime\nhttp://127.0.0.1:5000/predict?sepal_length=6.0&sepal_width=2.5&petal_length=5.5&petal_width=0"
  },
  {
    "objectID": "p02-20-api-flask.html#tài-liệu-tham-khảo",
    "href": "p02-20-api-flask.html#tài-liệu-tham-khảo",
    "title": "16  Xây dựng API dự báo với Flask",
    "section": "16.4 Tài liệu tham khảo",
    "text": "16.4 Tài liệu tham khảo\nXem thêm folder iris-api-prediction trong phần tài liệu\n\nhttps://github.com/satishkrupadhyay/Iris-Prediction-with-Web-API\nhttps://medium.com/@dvelsner/deploying-a-simple-machine-learning-model-in-a-modern-web-application-flask-angular-docker-a657db075280"
  },
  {
    "objectID": "p05-01-django.html#giới-thiệu",
    "href": "p05-01-django.html#giới-thiệu",
    "title": "17  Tạo website với Django",
    "section": "17.1 Giới thiệu",
    "text": "17.1 Giới thiệu\nDjango là framework rất hữu dụng trong python cho phép xây dựng website. Khác với blogdown hay rmarkdown, Django cho phép xây dựng website hoàn chỉnh, hỗ trợ tương tác với database\nGiới thiệu về Django\nBất kỳ website nào được xây dựng cũng có các cấu phần sau:\n\nDữ liệu - được quản lý, truy vấn, lưu trữ, thay đổi trong database, sử dụng các công cụ truy vấn databse\nDesign - quản lý các trải nghiệm người dùng, sử dụng các công cụ như HTML, CSS\nChức năng - quản lý và xây dựng các tính năng tương tác cho người dùng\nDeployment - quản lý và deploy các cấu phần của website\n\nĐể thực hiện việc quản lý và phát triển hiệu quả, các cấu phần cần được tách biệt với nhau. Theo các concept trên, Django có 3 cấu phần chính:\n\nLàm việc với database\nLàm việc với các template, hỗ trợ hiển thị cho người dùng\nQuản lý chức năng giúp người dùng tương tác với database\n\nCấu phần của Django:\n\nApp: Chứa các chức năng có trong website. Một website có thể chứa một hoặc nhiều app. Các module của app thường dùng đã được tạo sẵn với django và ta chỉ cần import. Trong folder project sẽ chứa trong settings.py\ndb.sqltite3: Default database, mặc định là sqlite\nmanage.py: Django utilities\n\n# ...\\my_clubproject\n\n\\env_myclub\n\\myclub_site        &lt;= This is your Django project\n    \\myclub_site    &lt;= This is a Django app\n    db.sqlite3      &lt;= Your project database\n    manage.py       &lt;= Django project management utility\nTrong cấu trúc website của project, có các file sau:\n# \\myclub_project\\myclub_root\\\n\n\\myclub_site\n    __init.py__\n    settings.py\n    urls.py\n    wsgi.py\n\n__init__.py: Mô tả website như là 1 package python\nsettings.py: Các cấu phần cài đặt của website\nurls.py: Cách thức website trả về các trang khi nhận được request\nwsgi.py: Các cấu phần liên quan đến deployment\n\nCác bước xây dựng Django website cơ bản:\n# Tạo virtual environment\npython -m venv env_myclub\n# Activate\nenv_myclub/scriptsactivate\n# Tạo project\ndjango-admin startproject env_myclub\n# Tạo database\npython manage.py migrate\n# Run server\npython manage.py runserver"
  },
  {
    "objectID": "p05-01-django.html#model",
    "href": "p05-01-django.html#model",
    "title": "17  Tạo website với Django",
    "section": "17.2 Model",
    "text": "17.2 Model\nĐể tương tác với database, Django dùng ORM - Object Relational Mapping\n\nDjango hỗ trợ 4 function cơ bản của Database là CRUD - Create, Read, Update & Delete"
  },
  {
    "objectID": "p05-01-django.html#tài-liệu-tham-khảo",
    "href": "p05-01-django.html#tài-liệu-tham-khảo",
    "title": "17  Tạo website với Django",
    "section": "17.3 Tài liệu tham khảo",
    "text": "17.3 Tài liệu tham khảo\n\nhttps://djangobook.com/mdj2-django-structure/"
  },
  {
    "objectID": "p06-01-lap-trinh-doi-tuong-python.html#giới-thiệu",
    "href": "p06-01-lap-trinh-doi-tuong-python.html#giới-thiệu",
    "title": "18  Lập trình hướng - đối tượng với Python",
    "section": "18.1 Giới thiệu",
    "text": "18.1 Giới thiệu\n\nNgôn ngữ tự nhiên (natural language) là ngôn ngữ do con người sáng tạo qua nhiều năm để nghe, nói, đọc, viết.\nFormal language là ngôn ngữ do con người tạo ra để phục vụ các ứng dụng nhất định - Token là đơn vị của ngôn ngữ. Ví dụ: 3*8=1&8, & không phải là token được sử dụng trong phép toán - Structure là cấu trúc hay ngữ pháp của ngôn ngữ (syntax)\nKhi đọc 1 statement, ta cần phải tìm hiểu cấu trúc của statement đó, quá trình này gọi là parsing\n\nObject-oriented programming - lập trình hướng đối tượng là mô hình lập trình (programming paradigm) rất phổ biến hiện nay. Các ngôn ngữ truyền thống như C, Fortran, Matlab..được viết theo mô hình Procedural Programming - lập trình hướng thủ tục, trong đó các câu lệnh, biến và data được chạy một cách độc lập hoặc được nhóm vào trong một hàm.\nNgược lại với phương pháp trên, với OOP, data, function và variable đều được đóng gói trong object, khi đó chúng ta gọi function là method. Python là ngôn ngữ kết hợp cả 2 phương pháp này tuy nhiên nhìn chung thì Python nghiêng về phong cách OOP hơn.\nHai khái niệm quan trọng nhất trong phần này là Class và Object, chúng ta sẽ thử tìm hiểu xem nó là gì qua các phần ở dưới."
  },
  {
    "objectID": "p06-01-lap-trinh-doi-tuong-python.html#objects",
    "href": "p06-01-lap-trinh-doi-tuong-python.html#objects",
    "title": "18  Lập trình hướng - đối tượng với Python",
    "section": "18.2 Objects",
    "text": "18.2 Objects\n\nIn Python, almost everything is an object, with its properties and methods.\n\nTrong Python, object bao gồm các thành phần: - Type - Kiểu dữ liệu - ID (unique) - Dùng để xác định vị trí của đối tượng trong memory - Data - Methods\n\n18.2.1 Type - kiểu dữ liệu\nVề các kiểu dữ liệu cơ bản, chúng ta đã nắm vững ở chương 1\n\ns = 'This is a string'\ntype(s)\n\nstr\n\n\nObject cũng có thể là function\n\ndef f(x): \n    return x**2\nf\n\n&lt;function __main__.f(x)&gt;\n\n\n\ntype(f)\n\nfunction\n\n\nhoặc thậm chí là module\n\nimport math\nmath\n\n&lt;module 'math' (built-in)&gt;\n\n\n\ntype(math)\n\nmodule\n\n\n\n\n18.2.2 Identity\nMọi object trong Python đều có 1 id unique - mỗi id tương ứng với 1 vị trí trong memory, có thể lấy id này qua hàm id\n\nx = 2.5\ny = 2.5\nid(x)\n\n2445917187312\n\n\n\nid(y)\n\n2445858943568\n\n\n\nx == y \n\nTrue\n\n\n\nx is y\n\nFalse\n\n\nỞ vd trên, x và y có cùng giá trị, tuy nhiên ko phải cùng 1 object\n\nz = x\nid(z)\n\n2445917187312\n\n\n\nz is x\n\nTrue\n\n\nx được gán cho z nên z và x sẽ có chung 1 id - chia sẻ tham chiếu đến bộ nhớ chứ ko tạo ra 1 ô nhớ mới\n\n\n18.2.3 Object Content - Data & Attributes\nNếu chúng ta gán x=42 - có nghĩa là tạo 1 object x có kiểu dữ liệu int và giá trị là 42, thực tế thì object x chứa nhiều nội dung hơn thế, có thể xem vd dưới\n\nx = 42\nx.imag\n\n0\n\n\n\nx.__class__\n\nint\n\n\nThử gõ x. sau đó ấn Tab chúng ta sẽ thấy hiện lên rất nhiều thông tin liên quan đến object vừa tạo, những thông tin này được gọi là attribute của object - e.g. imag và __class__ là các attribute của x\n\n\n18.2.4 Methods\nTrong các attribute của object, thuộc tính function được gọi là method\n\nx = ['foo', 'bar']\nx.append(3) \nx\n\n['foo', 'bar', 3]\n\n\nKhi gọi method, method sẽ xử lý trên data của object hoặc data được nhập vào\n\nx = ['a', 'b']\nx.append('c')\ns = 'This is a string'\ns.upper()\n\n'THIS IS A STRING'\n\n\nTóm tắt:\n\n\n\nTên\nPurpose\nSimilar to\nSyntax\n\n\n\n\nAttribute\nLưu trữ dữ liệu\nVariable\nobject.attribute()\n\n\nMethod\nProcess dữ liệu\nFunction\nobject.method()"
  },
  {
    "objectID": "p06-01-lap-trinh-doi-tuong-python.html#class",
    "href": "p06-01-lap-trinh-doi-tuong-python.html#class",
    "title": "18  Lập trình hướng - đối tượng với Python",
    "section": "18.3 Class",
    "text": "18.3 Class\nPhần trước chúng ta đã giới thiệu cơ bản về Object-oriented Programming và tìm hiểu về Object, phần này sẽ tìm hiểu cách tạo 1 object. Để làm được việc này, Python cung cấp 1 kiểu dữ liệu gọi là Class, hiểu đơn giản Class giống như 1 bản thiết kế/ template để tạo ra Object và trong bản thiết kế đó chúng ta có thể chỉ rõ được những đặc điểm mà mình mong muốn.\nHay nói cách khác Class là kiểu dữ liệu tự tạo ra. Dữ liệu được chứa trong Class được gọi là attribute\n\nclass Point:\n    \"\"\"Kiểu dữ liệu 2D\n    Attributes: x, y\n    \"\"\"\n\n\nPoint\n\n__main__.Point\n\n\nVì Point được lưu trữ ở global environment nên tên đầy đủ sẽ là __main__.Point. Quá trình tạo object mới được gọi là instantiation hay object là instance mới của class\n\nblank = Point()\n\n\n# Thêm attribute cho class\nblank.x = 3\nblank.y = 4\n\n\n18.3.1 Methods\nMethods là hàm được sử dụng trong class. Bản chất của methods là hàm nhưng có các điểm khác biệt sau\n\nMethods được khai báo ngay trong class\nNgữ pháp để gọi methods sẽ khác so với với gọi function\n\n\n# Cách viết thường\nclass Time:\n    \"\"\"Trả ra kết qua time\"\"\"\n    \ndef print_time(time):\n    print('%.2d:%.2d:%.2d' % (time.hour, time.minute, time.second))\n\n\nstart = Time()\n\n\n# Assign attribute\nstart.hour = 9\nstart.minute = 45\nstart.second = 20\nprint_time(start)\n\n09:45:20\n\n\nVới cách viết trên, ta phải để time dưới dạng argument. Tuy nhiên, ta có thể thay đổi cách viết bằng cách tạo methods trong class như sau.\n\nclass Time:\n    \"\"\"Trả ra thời gian\"\"\"\n    def print_time(time):\n        print('%.2d:%.2d:%.2d' % (time.hour, time.minute, time.second))\n\n\nstart = Time()\nstart.hour = 9\nstart.minute = 45\nstart.second = 20\nprint_time(start)\n\n09:45:20\n\n\n\n# Sử dụng methods\nTime.print_time(start)\n\n09:45:20\n\n\n\nstart.print_time()\n\n09:45:20\n\n\n\n\n18.3.2 Init method\n\n__init__ được sử dụng khi tạo ra object đầu tiên trong class\nselft là method được sử dụng khi tạo ra đối tượng mới (instance)\n\n\nclass Time:\n    def __init__(self, hour = 0, minute = 0, second = 0):\n        self.hour = hour\n        self.minute = minute\n        self.second = second\n    def print_time(time):\n        print('%.2d:%.2d:%.2d' % (time.hour, time.minute, time.second))\n\n\nstart = Time()\n\n\nstart.print_time()\n\n00:00:00\n\n\nKhi sử dụng class với init, ta có thể xây dựng tham số\n\nTime(9, 45).print_time()\n\n09:45:00\n\n\nLưu ý: Khi chưa sử dụng str method, khi print class sẽ không trả ra kết quả mong muốn\n\nprint(Time(9, 45))\n\n&lt;__main__.Time object at 0x00000239789AE140&gt;\n\n\n\n\n18.3.3 __str__ method\n\n__str__ là method cho phép hiển thị giá trị của instance\n\n\nclass Time:\n    def __init__(self, hour = 0, minute = 0, second = 0):\n        self.hour = hour\n        self.minute = minute\n        self.second = second\n    def print_time(time):\n        print('%.2d:%.2d:%.2d' % (time.hour, time.minute, time.second))\n    def __str__(time):\n        return '%.2d:%.2d:%.2d' % (time.hour, time.minute, time.second)\n\n\nprint(Time(4,5,8))\n\n04:05:08\n\n\n\nTime(4,5,6).print_time()\n\n04:05:06"
  },
  {
    "objectID": "p06-01-lap-trinh-doi-tuong-python.html#tài-liệu-tham-khảo",
    "href": "p06-01-lap-trinh-doi-tuong-python.html#tài-liệu-tham-khảo",
    "title": "18  Lập trình hướng - đối tượng với Python",
    "section": "18.4 Tài liệu tham khảo",
    "text": "18.4 Tài liệu tham khảo\n\nThink Python"
  },
  {
    "objectID": "p07-01-functions-in-python.html#giới-thiệu-về-hàm",
    "href": "p07-01-functions-in-python.html#giới-thiệu-về-hàm",
    "title": "19  Viết hàm trong Python",
    "section": "19.1 Giới thiệu về hàm",
    "text": "19.1 Giới thiệu về hàm\nTương tự như R, Python cho phép sử dụng hàm linh hoạt với các tham số và trả ra kết quả định sẵn. Có 1 số lưu ý như sau:\n\nHàm bắt đầu với def\nCác tham số mặc định được sử dụng tương tự như R. VD def plus(a, b = 2)\nTrong hàm cho phép ghi chú document của hàm trong ba dấu ngoặc kép, được gọi là docs string\nCác tham số chưa biết (tương ứng với ... trong R) được sử dụng với argument *args\n\n\ndef plus_1(a, b = 2):\n    \"\"\"Trả ra kết quả hàm tổng\"\"\"\n    return a + b\n\n\nplus_1(4)\n\n\n?plus_1\n\n\ndef plus_2(*args):\n    return np.sum(args)\n\n\nplus_2(3,4,5)\n\nVí dụ hàm trả ra n số Fibonacci đầu tiên\n\ndef fib_n(n):\n    if n == 1:\n        my_list = list([0])\n    elif n == 2:\n        my_list = list([0, 1])\n    else: \n        my_list = list([0, 1])\n        f0 = 0\n        f1 = 1\n        my_range = range(n-2)\n        for i in my_range:\n            f2 = f1 + f0\n            f0 = f1\n            f1 = f2\n            my_list.append(f2)\n    return(my_list)\n\n\nfib_n(9)"
  },
  {
    "objectID": "p07-01-functions-in-python.html#hàm-summary-theo-group",
    "href": "p07-01-functions-in-python.html#hàm-summary-theo-group",
    "title": "19  Viết hàm trong Python",
    "section": "19.2 Hàm summary theo group",
    "text": "19.2 Hàm summary theo group\n\ndef load_iris_df():\n    \"\"\"\n    Load iris data in the form of dataframe with grouping variable.\n    The data set is used to ilustrate different functions of VPBank package\n    \"\"\"\n    \n    import numpy as np\n    import pandas as pd\n    from sklearn.datasets import load_iris\n    iris = load_iris()\n    ref_species = pd.DataFrame({\n        'species_code' : [0, 1, 2],\n        'species' : iris.target_names\n    })\n    # Sửa lại name\n    name = pd.Series(iris.feature_names)\n    name = name.str.replace('\\\\(cm\\\\)', '')\n    name = name.str.strip().str.replace(' ', '_')\n    iris_df = pd.DataFrame(iris.data,\n                           columns = name)\n    iris_df['species_code'] = iris.target\n    iris_df = pd.merge(iris_df, ref_species, how = 'left').drop('species_code', 1)\n    iris_df['group'] = np.random.randint(1,3, 150)\n    iris_df.group = iris_df.group.astype(object)\n    return iris_df\n\n\niris_df = load_iris_df()\n\n\niris_df.groupby(['species', 'group'])['sepal_length'].agg({\n    'mean' : np.mean,\n    'median': np.median})\n\n\nnp.quantile(iris_df['sepal_length'], [0.75, 0.9])\n\n\n# Tạo hàm tính percentile\ndef percentile(n):\n    def percentile_(x):\n        return np.percentile(x,n)\n    percentile_.__name__ = 'percentile_%s' % n\n    return percentile_\n\n\niris_df.groupby('species')['sepal_length'].agg({\n    'mean',\n    np.median,\n    percentile(90),\n    percentile(25),\n    'count'\n})\n\n\ndef analytics_summarise(data, value_var, group_var):\n    \"\"\"Quickly summarise statistics of one measures by different groups\n    \n    Args: \n    \n    - data: dataframe to analyze\n    - value_var: variable to analyze\n    - group_var: list of grouping variables\n    \n    Returns:\n    \n    - A dataframe of summarise statistics\n    \n    \"\"\"\n    \n    def _percentile(n):\n        def percentile_(x):\n            return np.percentile(x,n)\n        percentile_.__name__ = 'percentile_%s' % n\n        return percentile_\n\n    result = data.groupby(group_var)[value_var].agg({\n        'n' : 'count',\n        'mean' : np.mean,\n        'min' : np.min,\n        'q25' : _percentile(25),\n        'median' : np.median,\n        'q75' : _percentile(75),\n        'q90' : _percentile(90),\n        'max' : np.max})\n    return result\n\n\nanalytics_summarise(iris_df, 'sepal_length', ['species', 'group'])\n\n\n# boxplot\ndef _draw_boxplot(data, value_var, group_var):\n    import seaborn as sns\n    from matplotlib import pyplot\n    # Set retina resolution for chart\n    %config InlineBackend.figure_format = 'retina'\n    sns.set_style(\"ticks\")\n    my_plot = sns.boxplot(x = \"species\", y = \"sepal_length\", data = iris_df)\n    sns.despine()     \n    return my_plot\n\n\nplot = _draw_boxplot(iris_df, 'sepal_length', 'species')\n\n\nimport matplotlib.pyplot as plt\nplot.set_yscale('log')\n\n\nplot.get_figure()\n\n\nplot.set(title = 'My plot')\nplot.get_figure()"
  },
  {
    "objectID": "p07-01-functions-in-python.html#anova-tukey-hsd",
    "href": "p07-01-functions-in-python.html#anova-tukey-hsd",
    "title": "19  Viết hàm trong Python",
    "section": "19.3 ANOVA Tukey HSD",
    "text": "19.3 ANOVA Tukey HSD\n\ndef _anova_turkey(data, value_var, group_var):   \n    from statsmodels.stats.multicomp import (pairwise_tukeyhsd,\n                                             MultiComparison)\n\n    MultiComp = MultiComparison(data[value_var],\n                                data[group_var])\n\n    # Show all pair-wise comparisons:\n\n    # Print the comparisons\n    result = MultiComp.tukeyhsd().summary()\n    print('Comparison of ' + value_var + ' by ' + group_var)\n    print('===========================================')\n  #  print(result)\n    return result\n\n\n_anova_turkey(iris_df, 'sepal_length', 'species')"
  },
  {
    "objectID": "p07-01-functions-in-python.html#compare-group",
    "href": "p07-01-functions-in-python.html#compare-group",
    "title": "19  Viết hàm trong Python",
    "section": "19.4 Compare group",
    "text": "19.4 Compare group\n\ndel [analytics_summarise, anova_turkey, compare_group, draw_boxplot]\n\n\ndef compare_group(data, value_var, group_var):\n    \n    # Declare class for result\n    \n    class compare_result(object):\n        def __init__(self, summary_table, aov_model, box_plot):\n            self.summary_table = summary_table\n            self.aov_model = aov_model\n            self.box_plot = box_plot\n\n    # Function to analyse data\n    \n    def analytics_summarise(data, value_var, group_var):\n        \"\"\"Summarise statistics\"\"\"\n   \n        def _percentile(n):\n            def percentile_(x):\n                return np.percentile(x,n)\n            percentile_.__name__ = 'percentile_%s' % n\n            return percentile_\n\n        result = data.groupby(group_var)[value_var].agg({\n            'n' : 'count',\n            'mean' : np.mean,\n            'min' : np.min,\n            'q25' : _percentile(25),\n            'median' : np.median,\n            'q75' : _percentile(75),\n            'q90' : _percentile(90),\n            'max' : np.max})\n        return result\n    \n    # Draw box plot\n    def draw_boxplot(data, value_var, group_var):\n        import seaborn as sns\n        from matplotlib import pyplot\n        # Set retina resolution for chart\n        %config InlineBackend.figure_format = 'retina'\n        sns.set_style(\"ticks\")\n        my_plot = sns.boxplot(x = data[group_var], y = data[value_var], data = data)\n        sns.despine()     \n        return my_plot\n    \n    # AOV model\n    def aov_turkey(data, value_var, group_var):\n        from statsmodels.stats.multicomp import (pairwise_tukeyhsd, MultiComparison)\n        MultiComp = MultiComparison(data[value_var],\n                                        data[group_var])\n        result = MultiComp.tukeyhsd().summary()\n        return result     \n    \n    return compare_result(\n        summary_table = analytics_summarise(data, value_var, group_var),\n        aov_model = aov_turkey(data, value_var, group_var),\n        box_plot = draw_boxplot(data, value_var, group_var))\n\n\nstat_result = compare_group(data = iris_df, group_var = 'species', value_var = 'sepal_length')\n\n\nstat_result.aov_model"
  }
]